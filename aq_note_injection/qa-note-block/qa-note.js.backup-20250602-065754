/**
 * QANoteBlock - 问答笔记统一功能块
 * v3.0 完整解耦版核心实现 + LocalNoteSaver集成
 */
window.QANoteBlock = {
    // 当前状态
    currentMode: 'qa',
    isProcessing: false,
    lastResponse: null,
    qaSaver: null,
    localNoteSaver: null,

    /**
     * 初始化
     */
    init() {
        // 初始化智能存储器
        this.qaSaver = new QANoteSaver({
            mode: this.getStorageMode(),
            apiUrl: 'http://localhost:8000/api/v1',
            debugMode: false,
            onSaveSuccess: this.handleSaveSuccess.bind(this),
            onSaveError: this.handleSaveError.bind(this)
        });

        // 初始化本地文件保存器
        this.initLocalNoteSaver();

        // 初始化界面
        this.initializeUI();
        this.bindEvents();
        this.loadUserInfo();
        this.switchMode('qa'); // 默认问答模式
        this.checkFileSystemSupport();
    },

    /**
     * 初始化本地文件保存器
     */
    initLocalNoteSaver() {
        try {
            this.localNoteSaver = new LocalNoteSaver({
                appName: '智能问答笔记系统v3.0',
                timestampFormat: 'zh-CN',
                debugMode: false
            });

            // 绑定本地保存功能
            this.localNoteSaver.bindSelectButton('#select-file-btn');
            this.localNoteSaver.bindInput('#content-input');
            this.localNoteSaver.bindCreateButton('#create-file-btn');

            // 重写状态显示方法
            this.localNoteSaver.showStatus = this.showLocalStatus.bind(this);

            console.log('✅ LocalNoteSaver 初始化成功');
        } catch (error) {
            console.error('❌ LocalNoteSaver 初始化失败:', error);
            this.showMessage('本地文件保存功能初始化失败', 'warning');
        }
    },

    /**
     * 检查File System API支持
     */
    checkFileSystemSupport() {
        const supportElement = document.getElementById('file-api-support');
        const statusElement = document.getElementById('file-api-status');
        
        if ('showSaveFilePicker' in window) {
            supportElement.textContent = '✅ 支持直接文件读写';
            statusElement.classList.add('supported');
            this.enableLocalFileFeatures();
        } else {
            supportElement.textContent = '⚠️ 仅支持下载保存';
            statusElement.classList.add('unsupported');
            this.limitLocalFileFeatures();
        }
    },

    /**
     * 启用本地文件功能
     */
    enableLocalFileFeatures() {
        // 显示本地保存按钮
        document.getElementById('local-save-btn').style.display = 'inline-flex';
        document.getElementById('local-save-answer-btn').style.display = 'inline-flex';
        document.getElementById('local-export-btn').style.display = 'inline-flex';
        
        // 更新存储模式选项
        const fileOption = document.querySelector('option[value="file"]');
        if (fileOption) {
            fileOption.style.display = 'block';
        }
    },

    /**
     * 限制本地文件功能
     */
    limitLocalFileFeatures() {
        // 隐藏部分本地保存按钮
        const fileOption = document.querySelector('option[value="file"]');
        if (fileOption) {
            fileOption.textContent = '📥 本地下载保存（兼容模式）';
        }
    },

    /**
     * 显示本地状态
     */
    showLocalStatus(message, type = 'info') {
        const statusOverlay = document.getElementById('status-overlay');
        const statusMessage = document.getElementById('status-message');
        const statusIcon = document.getElementById('status-icon');
        const statusText = document.getElementById('status-text');

        // 设置图标
        const icons = {
            success: '✅',
            error: '❌',
            warning: '⚠️',
            info: 'ℹ️'
        };

        statusIcon.textContent = icons[type] || icons.info;
        statusText.textContent = message;
        
        // 设置样式
        statusMessage.className = `status-message ${type}`;
        
        // 更新文件状态显示
        const fileStatus = document.getElementById('file-status');
        if (this.localNoteSaver && this.localNoteSaver.currentFileName) {
            fileStatus.textContent = `已选择: ${this.localNoteSaver.currentFileName}`;
            fileStatus.className = 'file-status success';
        }

        // 显示状态
        statusOverlay.style.display = 'block';
        
        // 3秒后自动隐藏
        setTimeout(() => {
            statusOverlay.style.display = 'none';
        }, 3000);
    },

    /**
     * 初始化界面
     */
    initializeUI() {
        // 设置存储模式选择器
        const storageSelect = document.getElementById('storage-select');
        if (storageSelect) {
            storageSelect.value = this.getStorageMode();
        }

        // 加载笔记本预览
        this.loadNotebookPreview();
    },

    /**
     * 绑定事件
     */
    bindEvents() {
        // 开关模式切换
        document.getElementById('mode-switch').addEventListener('change', (e) => {
            const isQAMode = e.target.checked;
            this.switchMode(isQAMode ? 'qa' : 'note');
        });

        // 主要操作按钮
        document.getElementById('submit-btn').addEventListener('click', () => {
            this.handleSubmit();
        });

        document.getElementById('clear-btn').addEventListener('click', () => {
            this.clearInputs();
        });

        document.getElementById('save-btn').addEventListener('click', () => {
            this.saveNote();
        });

        // 本地文件保存按钮
        document.getElementById('local-save-btn').addEventListener('click', () => {
            this.saveToLocalFile();
        });

        // 结果区域按钮
        document.getElementById('save-answer-btn').addEventListener('click', () => {
            this.saveLastResponse();
        });

        document.getElementById('copy-answer-btn').addEventListener('click', () => {
            this.copyAnswer();
        });

        document.getElementById('local-save-answer-btn').addEventListener('click', () => {
            this.saveLastResponseToLocalFile();
        });

        // 笔记本操作按钮
        document.getElementById('export-btn').addEventListener('click', () => {
            this.exportNotebook();
        });

        document.getElementById('clear-notebook-btn').addEventListener('click', () => {
            this.clearNotebook();
        });

        document.getElementById('local-export-btn').addEventListener('click', () => {
            this.exportToLocalFile();
        });

        // 存储模式切换
        document.getElementById('storage-select').addEventListener('change', (e) => {
            this.setStorageMode(e.target.value);
        });

        // 退出登录
        document.getElementById('logout-btn').addEventListener('click', () => {
            this.logout();
        });

        // 输入框变化监听
        document.getElementById('title-input').addEventListener('input', () => {
            this.validateInputs();
        });

        document.getElementById('content-input').addEventListener('input', () => {
            this.validateInputs();
        });

        // 图片粘贴监听
        document.getElementById('content-input').addEventListener('paste', (event) => {
            this.handleImagePaste(event);
        });
    },

    /**
     * 处理图片粘贴
     */
    handleImagePaste(event) {
        const items = event.clipboardData.items;
        
        for (let item of items) {
            if (item.type.indexOf('image') !== -1) {
                const file = item.getAsFile();
                this.addImagePreview(file);
                event.preventDefault();
                break;
            }
        }
    },

    /**
     * 添加图片预览
     */
    addImagePreview(file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            const imageSection = document.getElementById('image-preview-section');
            const container = document.getElementById('image-preview-container');
            
            // 显示图片预览区域
            imageSection.style.display = 'block';
            
            // 创建图片预览元素
            const preview = document.createElement('div');
            preview.className = 'image-preview';
            
            const img = document.createElement('img');
            img.src = e.target.result;
            img.alt = file.name || '粘贴的图片';
            
            const removeBtn = document.createElement('button');
            removeBtn.className = 'remove-btn';
            removeBtn.innerHTML = '×';
            removeBtn.onclick = () => {
                preview.remove();
                // 如果没有图片了，隐藏预览区域
                if (container.children.length === 0) {
                    imageSection.style.display = 'none';
                }
            };
            
            preview.appendChild(img);
            preview.appendChild(removeBtn);
            container.appendChild(preview);
            
            // 更新LocalNoteSaver的图片数组
            if (this.localNoteSaver) {
                this.localNoteSaver.addImage(e.target.result);
            }
        };
        
        reader.readAsDataURL(file);
        this.showMessage('图片已添加，将包含在保存的笔记中', 'success');
    },

    /**
     * 保存到本地文件
     */
    async saveToLocalFile() {
        if (!this.localNoteSaver) {
            this.showMessage('本地文件保存功能未初始化', 'error');
            return;
        }

        try {
            const result = await this.localNoteSaver.saveNote();
            if (result && result.success) {
                this.showMessage(`已保存到本地文件: ${result.fileName}`, 'success');
                this.clearInputs();
            }
        } catch (error) {
            this.showMessage(`本地保存失败: ${error.message}`, 'error');
        }
    },

    /**
     * 保存最后回答到本地文件
     */
    async saveLastResponseToLocalFile() {
        if (!this.lastResponse || !this.localNoteSaver) {
            this.showMessage('没有可保存的回答或本地保存功能未初始化', 'warning');
            return;
        }

        try {
            // 临时设置输入内容为AI回答
            const originalContent = this.localNoteSaver.getInputContent();
            const contentElement = document.getElementById('content-input');
            const aiResponse = this.lastResponse.ai_response?.response || this.lastResponse.content;
            
            contentElement.value = `AI回答：\n\n${aiResponse}`;
            
            const result = await this.localNoteSaver.saveNote();
            
            // 恢复原始内容
            contentElement.value = originalContent;
            
            if (result && result.success) {
                this.showMessage(`AI回答已保存到本地文件: ${result.fileName}`, 'success');
            }
        } catch (error) {
            this.showMessage(`本地保存失败: ${error.message}`, 'error');
        }
    },

    /**
     * 导出到本地文件
     */
    async exportToLocalFile() {
        if (!this.localNoteSaver) {
            this.showMessage('本地文件保存功能未初始化', 'error');
            return;
        }

        try {
            const notebookContent = this.qaSaver.getNotebookContent();
            if (!notebookContent.trim()) {
                this.showMessage('笔记本为空，无法导出', 'warning');
                return;
            }

            // 临时设置内容
            const contentElement = document.getElementById('content-input');
            const originalContent = contentElement.value;
            
            contentElement.value = `# 笔记本完整导出\n\n${notebookContent}`;
            
            const result = await this.localNoteSaver.saveNote();
            
            // 恢复原始内容
            contentElement.value = originalContent;
            
            if (result && result.success) {
                this.showMessage(`笔记本已导出到本地文件: ${result.fileName}`, 'success');
            }
        } catch (error) {
            this.showMessage(`导出失败: ${error.message}`, 'error');
        }
    },

    /**
     * 切换模式（核心功能）
     */
    switchMode(mode) {
        if (!['qa', 'note'].includes(mode)) {
            this.showMessage('无效的模式', 'error');
            return { success: false, error: '无效的模式' };
        }

        this.currentMode = mode;

        // 更新开关状态
        const modeSwitch = document.getElementById('mode-switch');
        modeSwitch.checked = (mode === 'qa');

        if (mode === 'qa') {
            // 问答模式界面
            this.updateUIForQAMode();
        } else {
            // 笔记模式界面
            this.updateUIForNoteMode();
        }

        return {
            success: true,
            data: {
                previousMode: this.currentMode,
                newMode: mode,
                switchedAt: new Date().toISOString()
            }
        };
    },

    /**
     * 更新界面为问答模式
     */
    updateUIForQAMode() {
        // 更新标签和提示
        document.getElementById('title-label').textContent = '问题标题';
        document.getElementById('content-label').textContent = '问题内容';
        document.getElementById('title-input').placeholder = '请输入问题标题...';
        document.getElementById('content-input').placeholder = '请详细描述您的问题...（支持图片粘贴）';
        document.getElementById('title-hint').textContent = '简要描述您的问题';
        document.getElementById('content-hint').textContent = '详细描述您的问题，以获得更准确的回答。支持Ctrl+V粘贴图片';

        // 显示AI智能体选择
        document.getElementById('agent-selection').style.display = 'block';

        // 更新按钮
        document.getElementById('submit-text').textContent = '🚀 发送问题';
        document.getElementById('save-btn').style.display = 'none';
        document.getElementById('local-save-btn').style.display = 'inline-flex';

        // 隐藏笔记本预览，显示结果区域（如果有）
        document.getElementById('notebook-section').style.display = 'none';
        if (this.lastResponse) {
            document.getElementById('result-section').style.display = 'block';
        }
    },

    /**
     * 更新界面为笔记模式
     */
    updateUIForNoteMode() {
        // 更新标签和提示
        document.getElementById('title-label').textContent = '笔记标题';
        document.getElementById('content-label').textContent = '笔记内容';
        document.getElementById('title-input').placeholder = '请输入笔记标题...';
        document.getElementById('content-input').placeholder = '记录您的想法、学习笔记等...（支持图片粘贴）';
        document.getElementById('title-hint').textContent = '为您的笔记起个标题';
        document.getElementById('content-hint').textContent = '记录您的想法、学习心得或重要信息。支持Ctrl+V粘贴图片';

        // 隐藏AI智能体选择
        document.getElementById('agent-selection').style.display = 'none';

        // 更新按钮
        document.getElementById('submit-text').textContent = '💾 保存笔记';
        document.getElementById('save-btn').style.display = 'inline-flex';
        document.getElementById('local-save-btn').style.display = 'inline-flex';

        // 显示笔记本预览，隐藏结果区域
        document.getElementById('result-section').style.display = 'none';
        document.getElementById('notebook-section').style.display = 'block';
        this.loadNotebookPreview();
    },

    /**
     * 处理提交（问答或笔记）
     */
    async handleSubmit() {
        if (this.isProcessing) {
            this.showMessage('请等待当前操作完成', 'warning');
            return;
        }

        if (!this.validateInputs()) {
            return;
        }

        if (this.currentMode === 'qa') {
            await this.askQuestion();
        } else {
            await this.saveNote();
        }
    },

    /**
     * 发送问题（含自动保存逻辑）
     */
    async askQuestion() {
        const questionData = this.getInputData();
        questionData.agent_id = this.getSelectedAgent();

        try {
            this.isProcessing = true;
            this.showLoading('正在向AI提问...');

            // 1. 模拟AI回答（实际部署时连接真实API）
            const response = await this.mockAIResponse(questionData);

            if (response.success && response.data) {
                // 2. 显示AI回答
                this.displayAIResponse(response.data);

                // 3. 使用智能存储器自动保存
                let autoSaveResult = null;
                try {
                    autoSaveResult = await this.qaSaver.saveContent({
                        title: `问答：${questionData.title}`,
                        content: response.data.ai_response?.response || response.data.content,
                        type: 'qa',
                        agentId: questionData.agent_id,
                        tags: [...(questionData.tags || []), 'AI问答', 'auto-saved']
                    });
                } catch (saveError) {
                    console.warn('自动保存失败:', saveError);
                    autoSaveResult = { success: false, error: saveError.message };
                }

                // 4. 更新响应数据
                response.data.autoSaved = autoSaveResult ? autoSaveResult.success : false;
                response.data.autoSaveDetails = autoSaveResult;
                response.data.userMessage = this.generateSaveMessage(autoSaveResult);

                this.lastResponse = response.data;

                // 5. 处理问答完成后的后续操作
                await this.handleQuestionComplete(response);

                return response;

            } else {
                throw new Error(response.error || '问答失败');
            }

        } catch (error) {
            console.error('问答处理失败:', error);
            this.showMessage(`问答失败: ${error.message}`, 'error');
            return {
                success: false,
                error: error.message,
                data: {
                    autoSaved: false,
                    autoSaveDetails: null
                }
            };

        } finally {
            this.isProcessing = false;
            this.hideLoading();
        }
    },

    /**
     * 模拟AI回答（演示用）
     */
    async mockAIResponse(questionData) {
        // 模拟网络延迟
        await new Promise(resolve => setTimeout(resolve, 1500));

        const responses = {
            general: `基于您的问题"${questionData.title}"，我的建议如下：\n\n这是一个很好的问题。根据我的分析，您可以从以下几个方面来考虑：\n\n1. 首先分析问题的核心要点\n2. 然后寻找相关的解决方案\n3. 最后制定具体的执行计划\n\n希望这个回答对您有帮助。如果还有其他问题，请随时提问。`,
            code: `关于您的编程问题"${questionData.title}"：\n\n这里是一个示例解决方案：\n\n\`\`\`python\n# 示例代码\ndef solve_problem():\n    # 实现逻辑\n    result = process_data()\n    return result\n\`\`\`\n\n主要要点：\n- 代码结构清晰\n- 注意错误处理\n- 性能优化考虑\n\n建议您可以进一步优化和测试这个方案。`,
            writing: `关于您的写作需求"${questionData.title}"：\n\n写作建议如下：\n\n**结构框架：**\n1. 开头：引入主题，吸引读者\n2. 主体：详细展开，逻辑清晰\n3. 结尾：总结要点，呼应开头\n\n**写作技巧：**\n- 语言简洁明了\n- 逻辑结构清晰\n- 适当使用例子说明\n\n希望这些建议能帮助您完成高质量的写作。`
        };

        return {
            success: true,
            data: {
                questionId: `q_${Date.now()}`,
                ai_response: {
                    response: responses[questionData.agent_id] || responses.general,
                    tokens_used: Math.floor(Math.random() * 1000) + 500,
                    model: questionData.agent_id === 'code' ? 'GPT-4-Code' : 'GPT-4'
                },
                agent_id: questionData.agent_id,
                timestamp: new Date().toISOString()
            }
        };
    },

    /**
     * 问答完成后的后续处理
     */
    async handleQuestionComplete(result) {
        if (result.success && result.data.autoSaved) {
            // 自动切换到笔记模式
            setTimeout(() => {
                this.switchMode('note');
            }, 1000);

            // 显示成功消息
            this.showMessage(
                result.data.userMessage || '问答已自动保存为笔记',
                'success',
                {
                    duration: 4000,
                    actions: [
                        {
                            text: '查看笔记',
                            callback: () => {
                                this.switchMode('note');
                                this.loadNotebookPreview();
                            }
                        }
                    ]
                }
            );

        } else if (result.success && !result.data.autoSaved) {
            // 问答成功但自动保存失败
            this.showMessage(
                'AI回答成功，但自动保存失败，请手动保存',
                'warning',
                {
                    duration: 5000,
                    actions: [
                        {
                            text: '手动保存',
                            callback: () => this.saveLastResponse()
                        }
                    ]
                }
            );
        }
    },

    /**
     * 保存笔记
     */
    async saveNote() {
        const noteData = this.getInputData();

        if (!noteData.title.trim() || !noteData.content.trim()) {
            this.showMessage('请填写标题和内容', 'warning');
            return;
        }

        try {
            this.isProcessing = true;
            this.showLoading('正在保存笔记...');

            const result = await this.qaSaver.saveContent({
                title: noteData.title,
                content: noteData.content,
                type: 'note',
                tags: noteData.tags || []
            });

            if (result.success) {
                this.showMessage('笔记保存成功！', 'success');
                this.clearInputs();
                await this.loadNotebookPreview();
            } else {
                throw new Error(result.error || '保存失败');
            }

            return this.formatSaveResult(result);

        } catch (error) {
            console.error('保存笔记失败:', error);
            this.showMessage(`保存失败: ${error.message}`, 'error');
            return {
                success: false,
                error: error.message
            };

        } finally {
            this.isProcessing = false;
            this.hideLoading();
        }
    },

    /**
     * 显示AI回答
     */
    displayAIResponse(data) {
        const resultSection = document.getElementById('result-section');
        const resultContent = document.getElementById('result-content');
        const resultMeta = document.getElementById('result-meta');

        // 显示回答内容
        const aiResponse = data.ai_response?.response || data.content || '未能获取到回答';
        resultContent.textContent = aiResponse;

        // 显示元信息
        const metaHTML = `
            <div class="meta-item">时间: ${new Date().toLocaleString('zh-CN')}</div>
            <div class="meta-item">智能体: ${this.getAgentDisplayName(data.agent_id)}</div>
            ${data.ai_response?.tokens_used ? `<div class="meta-item">Token: ${data.ai_response.tokens_used}</div>` : ''}
            ${data.autoSaved ? '<div class="meta-item" style="color: #10b981;">✅ 已自动保存</div>' : '<div class="meta-item" style="color: #f59e0b;">⚠️ 自动保存失败</div>'}
        `;
        resultMeta.innerHTML = metaHTML;

        // 显示结果区域
        resultSection.style.display = 'block';
        resultSection.scrollIntoView({ behavior: 'smooth' });
    },

    /**
     * 获取智能体显示名称
     */
    getAgentDisplayName(agentId) {
        const names = {
            general: '🧠 通用智能体',
            code: '💻 代码助手', 
            writing: '✍️ 写作助手'
        };
        return names[agentId] || '通用';
    },

    /**
     * 获取输入数据
     */
    getInputData() {
        const title = document.getElementById('title-input').value.trim();
        const content = document.getElementById('content-input').value.trim();
        const tagsText = document.getElementById('tags-input').value.trim();
        const tags = tagsText ? tagsText.split(',').map(tag => tag.trim()).filter(tag => tag) : [];

        return { title, content, tags };
    },

    /**
     * 获取选中的AI智能体
     */
    getSelectedAgent() {
        const select = document.getElementById('agent-select');
        return select ? select.value : 'general';
    },

    /**
     * 验证输入
     */
    validateInputs() {
        const { title, content } = this.getInputData();
        const isValid = title.trim() && content.trim();

        const submitBtn = document.getElementById('submit-btn');
        submitBtn.disabled = !isValid;

        return isValid;
    },

    /**
     * 清空输入框
     */
    clearInputs() {
        document.getElementById('title-input').value = '';
        document.getElementById('content-input').value = '';
        document.getElementById('tags-input').value = '';
        
        // 重置AI智能体选择
        const agentSelect = document.getElementById('agent-select');
        if (agentSelect) {
            agentSelect.value = 'general';
        }

        // 清空图片预览
        const imageSection = document.getElementById('image-preview-section');
        const container = document.getElementById('image-preview-container');
        container.innerHTML = '';
        imageSection.style.display = 'none';

        // 清空LocalNoteSaver的图片
        if (this.localNoteSaver) {
            this.localNoteSaver.images = [];
        }
        
        this.validateInputs();

        return { success: true };
    },

    /**
     * 加载用户信息
     */
    loadUserInfo() {
        // 这里应该从AuthBlock获取用户信息
        // 暂时使用演示数据
        const userDisplay = document.getElementById('user-display');
        userDisplay.textContent = '演示用户';
    },

    /**
     * 加载笔记本预览
     */
    async loadNotebookPreview() {
        const notebookContent = document.getElementById('notebook-content');
        const content = this.qaSaver.getNotebookContent();

        if (content.trim()) {
            notebookContent.innerHTML = `<pre style="white-space: pre-wrap; padding: 1rem; font-family: monospace; line-height: 1.6;">${content}</pre>`;
        } else {
            notebookContent.innerHTML = '<div class="empty-state"><p>📝 还没有笔记，开始记录您的想法吧！</p></div>';
        }
    },

    /**
     * 保存最后一次回答
     */
    async saveLastResponse() {
        if (!this.lastResponse) {
            this.showMessage('没有可保存的回答', 'warning');
            return;
        }

        try {
            const content = this.lastResponse.ai_response?.response || this.lastResponse.content;
            const result = await this.qaSaver.saveContent({
                title: `手动保存的问答`,
                content: content,
                type: 'qa-manual',
                tags: ['手动保存', 'AI问答']
            });

            if (result.success) {
                this.showMessage('回答已保存为笔记！', 'success');
                this.loadNotebookPreview();
            } else {
                throw new Error(result.error);
            }

        } catch (error) {
            this.showMessage(`保存失败: ${error.message}`, 'error');
        }
    },

    /**
     * 复制回答
     */
    copyAnswer() {
        const resultContent = document.getElementById('result-content');
        const text = resultContent.textContent;

        navigator.clipboard.writeText(text).then(() => {
            this.showMessage('回答已复制到剪贴板', 'success');
        }).catch(error => {
            this.showMessage('复制失败', 'error');
        });
    },

    /**
     * 导出笔记本
     */
    exportNotebook() {
        try {
            this.qaSaver.exportNotebook();
            this.showMessage('笔记本导出成功！', 'success');
        } catch (error) {
            this.showMessage(`导出失败: ${error.message}`, 'error');
        }
    },

    /**
     * 清空笔记本
     */
    clearNotebook() {
        if (confirm('确定要清空所有笔记吗？此操作不可恢复！')) {
            this.qaSaver.clearNotebook();
            this.loadNotebookPreview();
            this.showMessage('笔记本已清空', 'info');
        }
    },

    /**
     * 设置存储模式
     */
    setStorageMode(mode) {
        if (mode === 'file') {
            // 文件直接读写模式
            this.showMessage('已切换到本地文件直接读写模式', 'info');
            return { success: true };
        }

        const result = this.qaSaver.switchMode(mode);
        if (result.success) {
            localStorage.setItem('qa_storage_mode', mode);
            this.showMessage(`存储模式已切换为: ${this.getStorageModeDisplay(mode)}`, 'info');
        }
        return result;
    },

    /**
     * 获取存储模式
     */
    getStorageMode() {
        return localStorage.getItem('qa_storage_mode') || 'hybrid';
    },

    /**
     * 获取存储模式显示名称
     */
    getStorageModeDisplay(mode) {
        const displays = {
            'hybrid': '混合模式',
            'server': '仅服务器',
            'local': '仅本地',
            'file': '本地文件直接读写'
        };
        return displays[mode] || mode;
    },

    /**
     * 生成保存消息
     */
    generateSaveMessage(saveResult) {
        if (!saveResult) return '问答完成，但保存失败';

        const mode = this.qaSaver.config.mode;

        if (mode === 'hybrid') {
            if (saveResult.synced) {
                return '问答已完成并同步保存到服务器和本地';
            } else {
                return '问答已完成并保存到本地，将在网络恢复时同步';
            }
        } else if (mode === 'server') {
            return saveResult.success ? '问答已完成并保存到服务器' : '问答完成，但服务器保存失败';
        } else {
            return saveResult.success ? '问答已完成并保存到本地文件' : '问答完成，但本地保存失败';
        }
    },

    /**
     * 格式化保存结果
     */
    formatSaveResult(result) {
        return {
            success: result.success || false,
            data: {
                noteId: result.id || result.server?.id || `local_${Date.now()}`,
                savedAt: new Date().toISOString(),
                storageMode: this.qaSaver.config.mode,
                storage: {
                    server: {
                        success: result.server?.success || false,
                        noteId: result.server?.id,
                        error: result.server?.error
                    },
                    local: {
                        success: result.local?.success || result.cached || false,
                        cached: result.cached || false,
                        downloaded: result.local?.downloaded || false,
                        error: result.local?.error
                    }
                },
                performance: {
                    totalTime: result.performance?.totalTime || 0,
                    mode: this.qaSaver.config.mode
                }
            },
            error: result.error
        };
    },

    /**
     * 退出登录
     */
    logout() {
        if (confirm('确定要退出登录吗？')) {
            localStorage.removeItem('qa_auth_token');
            window.location.href = 'auth-block/auth.html';
        }
    },

    /**
     * 显示消息
     */
    showMessage(text, type = 'info', options = {}) {
        const messageContainer = document.getElementById('message-container');
        const messageId = `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

        const messageDiv = document.createElement('div');
        messageDiv.className = `message-toast message-${type}`;
        messageDiv.id = messageId;

        const icons = {
            success: '✅',
            error: '❌',
            warning: '⚠️',
            info: 'ℹ️'
        };

        let messageHTML = `
            <div style="display: flex; align-items: flex-start; gap: 0.75rem;">
                <span style="font-size: 1.1rem;">${icons[type]}</span>
                <div style="flex: 1;">
                    <div>${text}</div>
        `;

        if (options.actions && options.actions.length > 0) {
            messageHTML += '<div style="margin-top: 0.5rem; display: flex; gap: 0.5rem;">';
            options.actions.forEach((action, index) => {
                messageHTML += `<button onclick="QANoteBlock.handleMessageAction('${messageId}', ${index})" style="padding: 0.25rem 0.75rem; border: 1px solid currentColor; background: transparent; color: inherit; border-radius: 4px; cursor: pointer; font-size: 0.875rem;">${action.text}</button>`;
            });
            messageHTML += '</div>';
        }

        messageHTML += `
                </div>
                <button onclick="QANoteBlock.removeMessage('${messageId}')" style="background: none; border: none; color: inherit; cursor: pointer; font-size: 1.2rem; opacity: 0.7;">&times;</button>
            </div>
        `;

        messageDiv.innerHTML = messageHTML;
        messageContainer.appendChild(messageDiv);

        // 存储动作回调
        if (options.actions) {
            messageDiv._actions = options.actions;
        }

        // 显示动画
        requestAnimationFrame(() => {
            messageDiv.classList.add('show');
        });

        // 自动关闭
        const duration = options.duration || 3000;
        if (duration > 0) {
            setTimeout(() => {
                this.removeMessage(messageId);
            }, duration);
        }
    },

    /**
     * 处理消息动作
     */
    handleMessageAction(messageId, actionIndex) {
        const messageDiv = document.getElementById(messageId);
        if (messageDiv && messageDiv._actions && messageDiv._actions[actionIndex]) {
            const action = messageDiv._actions[actionIndex];
            if (action.callback) {
                action.callback();
            }
        }
        this.removeMessage(messageId);
    },

    /**
     * 移除消息
     */
    removeMessage(messageId) {
        const messageDiv = document.getElementById(messageId);
        if (messageDiv) {
            messageDiv.classList.remove('show');
            setTimeout(() => {
                if (messageDiv.parentNode) {
                    messageDiv.parentNode.removeChild(messageDiv);
                }
            }, 300);
        }
    },

    /**
     * 显示加载状态
     */
    showLoading(text = '处理中...') {
        const overlay = document.getElementById('loading-overlay');
        const loadingText = document.querySelector('.loading-text');
        if (loadingText) {
            loadingText.textContent = text;
        }
        overlay.style.display = 'flex';
    },

    /**
     * 隐藏加载状态
     */
    hideLoading() {
        const overlay = document.getElementById('loading-overlay');
        overlay.style.display = 'none';
    },

    /**
     * 保存失败时的手动兜底操作
     */
    handleSaveSuccess(result) {
        console.log('保存成功:', result);
    },

    handleSaveError(error) {
        console.error('保存失败:', error);
    }
};

// 页面加载时初始化
document.addEventListener('DOMContentLoaded', () => {
    QANoteBlock.init();
}); 