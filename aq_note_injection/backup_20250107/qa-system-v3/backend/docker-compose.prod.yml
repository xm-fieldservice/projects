version: '3.8'

# 生产环境Docker Compose配置
# 智能问答系统v3.0 - 生产级部署

services:
  # 应用服务 - 主实例
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: qa-system-app-1
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-your-strong-password}
      - DB_NAME=qa_system_v3
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - SECRET_KEY=${SECRET_KEY:-your-production-secret-key-must-be-changed}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY:-}
      - CORS_ORIGINS=https://qa-system.example.com,https://www.qa-system.example.com
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    restart: unless-stopped
    networks:
      - qa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # 应用服务 - 副本实例（可选，用于负载均衡）
  app-replica:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: qa-system-app-2
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-your-strong-password}
      - DB_NAME=qa_system_v3
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - SECRET_KEY=${SECRET_KEY:-your-production-secret-key-must-be-changed}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY:-}
      - CORS_ORIGINS=https://qa-system.example.com,https://www.qa-system.example.com
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    restart: unless-stopped
    networks:
      - qa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    profiles:
      - replica  # 使用 --profile replica 启动

  # PostgreSQL数据库
  db:
    image: postgres:15-alpine
    container_name: qa-system-db
    environment:
      - POSTGRES_DB=qa_system_v3
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD:-your-strong-password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "127.0.0.1:5432:5432"  # 只绑定本地
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./scripts/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    restart: unless-stopped
    networks:
      - qa-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d qa_system_v3"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c logging_collector=on
      -c log_directory=/var/log/postgresql
      -c log_filename=postgresql-%Y-%m-%d_%H%M%S.log

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: qa-system-redis
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "127.0.0.1:6379:6379"  # 只绑定本地
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
    restart: unless-stopped
    networks:
      - qa-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Nginx反向代理和负载均衡
  nginx:
    image: nginx:alpine
    container_name: qa-system-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - ./static:/var/www/html:ro
    depends_on:
      app:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - qa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # 监控 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: qa-system-prometheus
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - qa-network
    profiles:
      - monitoring

  # 监控 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: qa-system-grafana
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=monitoring.qa-system.example.com
    restart: unless-stopped
    networks:
      - qa-network
    profiles:
      - monitoring

  # 日志收集 - Fluentd
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: qa-system-fluentd
    volumes:
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - app_logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
      - postgres_logs:/var/log/postgresql:ro
      - redis_logs:/var/log/redis:ro
    ports:
      - "127.0.0.1:24224:24224"
    restart: unless-stopped
    networks:
      - qa-network
    profiles:
      - logging

  # 数据库备份服务
  db-backup:
    image: postgres:15-alpine
    container_name: qa-system-db-backup
    environment:
      - PGPASSWORD=${DB_PASSWORD:-your-strong-password}
    volumes:
      - db_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: >
      sh -c 'apk add --no-cache dcron &&
             echo "0 2 * * * /backup.sh" | crontab - &&
             crond -f'
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - qa-network
    profiles:
      - backup

# 数据卷定义
volumes:
  # 应用数据
  app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/uploads
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/logs

  # 数据库数据
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  postgres_logs:
    driver: local

  # Redis数据
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  redis_logs:
    driver: local

  # Nginx日志
  nginx_logs:
    driver: local

  # 监控数据
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

  # 备份数据
  db_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/backups

# 网络定义
networks:
  qa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 