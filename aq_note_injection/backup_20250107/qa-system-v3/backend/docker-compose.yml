version: '3.8'

services:
  # 主应用服务
  app:
    build: .
    container_name: qa-system-app
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=qa_system_v3
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SECRET_KEY=your-production-secret-key
    depends_on:
      - db
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - qa-network

  # PostgreSQL数据库
  db:
    image: postgres:15-alpine
    container_name: qa-system-db
    environment:
      - POSTGRES_DB=qa_system_v3
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - qa-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: qa-system-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - qa-network

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: qa-system-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - qa-network

# 数据卷
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# 网络
networks:
  qa-network:
    driver: bridge 