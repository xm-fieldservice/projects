# NodeMind 会话系统设计文档（修正版）

## 📋 系统概述

基于NodeMind万能数据底座和MD直存机制，设计实现节点内部的会话管理系统。会话系统利用现有的"会话列表"标签页组件，支持笔记模式和问答模式两种内容创建方式，实现会话列表与内容框的点击联动，并集成标签系统进行会话级标签管理。

## 🎯 核心概念定义

### 数据结构规范

```javascript
// 会话块数据结构（符合MD直存规范）
const SessionBlock = {
    id: "session_unique_id",           // 唯一标识符
    type: "note|interaction",          // 笔记块 | 交互块
    title: "会话标题",                 // 笔记前20字 | 问题内容
    content: "完整内容",               // 笔记内容 | 问题+AI回答
    timestamp: "2024-01-01T00:00:00Z", // 创建时间
    modified: "2024-01-01T00:00:00Z",  // 修改时间
    tags: ["tag1", "tag2"],            // 会话级标签（来自标签组内的标签）
    isFavorited: false,                // 收藏状态（系统级标签）
    nodeId: "parent_node_id",          // 所属节点ID
    metadata: {                        // 扩展元数据
        author: "用户名",
        priority: "normal|high|low"
    }
};

// 节点会话容器（扩展现有nodeDatabase）
const NodeSessionContainer = {
    nodeId: "node_id",
    sessions: ["session_id1", "session_id2"], // 按创建时间降序
    activeSessionId: "current_session_id",    // 当前激活会话
    sessionMode: "note|interaction"           // 当前模式（关联问答模式开关）
};
```

## 🏗️ UI布局设计（基于现有组件）

### 正常模式布局
```
右侧面板结构：
┌─────────────────────────────────────┐
│ 📝 综合组件 | 📋 会话列表 | 📄 模板列表 │ ← 现有标签页
├─────────────────────────────────────┤
│ 内容框（显示当前会话内容）            │
│ ┌─────────────────────────────────┐ │
│ │ ☑️ 问答模式 [现有开关]           │ │
│ │ #完成                           │ │
│ │                                 │ │
│ │ [会话内容显示区域]               │ │ ← 内容编辑器
│ │                                 │ │
│ │                     [🔍 全屏]   │ │ ← 新增全屏按钮
│ └─────────────────────────────────┘ │
├─────────────────────────────────────┤
│ 📋 会话列表标签页内容                │ ← 现有组件
│ ┌─────────────────────────────────┐ │
│ │ 💬 项目讨论会话    [⭐][🗑️]    │ │ ← 新增图标
│ │ 2024-01-15 14:30               │ │
│ │ 🔧 技术方案讨论    [⭐][🗑️]    │ │
│ │ 2024-01-15 10:15               │ │
│ │ 📊 需求分析会话    [⭐][🗑️]    │ │
│ │ 2024-01-14 16:45               │ │
│ └─────────────────────────────────┘ │
└─────────────────────────────────────┘
```

### 全屏模式布局
```
┌─────────────────────────────────────────────────────────────┐
│ 全屏弹窗 - 会话管理模式                                      │
│ ┌─────────────────────────┬─────────────────────────────────┐ │
│ │ 内容框（放大显示）        │ 会话列表（放大显示）              │ │
│ │ ☑️ 问答模式              │ ┌─────────────────────────────┐ │ │
│ │                         │ │ 💬 项目讨论会话    [⭐][🗑️] │ │ │
│ │ [会话内容显示区域]       │ │ 2024-01-15 14:30           │ │ │
│ │                         │ │ 🔧 技术方案讨论    [⭐][🗑️] │ │ │
│ │                         │ │ 2024-01-15 10:15           │ │ │
│ │                    [❌] │ │ 📊 需求分析会话    [⭐][🗑️] │ │ │
│ └─────────────────────────┴─────────────────────────────────┘ │
└─────────────────────────────────────────────────────────────┘
```

## 🔄 功能流程设计

### 1. 会话创建流程

#### 笔记模式（问答模式开关关闭）
```
用户在内容框输入 → 点击提交 → 创建会话块
├─ title: content.substring(0, 20) + "..."
├─ type: "note"
├─ content: 完整输入内容
├─ 自动添加到会话列表（顶部）
└─ 自动保存到nodeDatabase
```

#### 问答模式（问答模式开关开启）
```
用户输入问题 → 点击提交 → 发送给AI → 等待回答 → 拼接成会话块
├─ title: 问题内容（截取前20字）
├─ type: "interaction"  
├─ content: "问题\n\n[AI回答]\n回答内容"
├─ 自动添加到会话列表（顶部）
└─ 自动保存到nodeDatabase
```

### 2. 会话切换流程
```
点击会话列表项 → 更新activeSessionId → 内容框切换显示该会话 → 标签作用域切换到会话级
```

### 3. 标签系统集成
```
标签点击 → 检测当前内容框状态
├─ 显示完整节点内容 → 节点级标签
└─ 显示特定会话 → 会话级标签（追加到内容尾部）

会话级标签来源：标签组内的标签（不包括系统级收藏标签）
```

## 📊 数据存储规范

### nodeDatabase扩展结构
```javascript
// 扩展现有nodeDatabase结构
nodeDatabase[nodeId] = {
    // 现有字段保持不变
    id: nodeId,
    title: "节点标题",
    content: "节点主要内容", // 当无活跃会话时显示
    tags: { categories: [], technical: [], status: [] },
    
    // 新增会话相关字段
    sessions: {
        list: ["session_id1", "session_id2"], // 按创建时间降序
        active: "session_id1",                // 当前激活会话ID
        mode: "note|interaction",             // 当前创建模式
        data: {
            "session_id1": {
                id: "session_id1",
                type: "note",
                title: "项目讨论会话",
                content: "会话具体内容...",
                timestamp: "2024-01-15T14:30:00Z",
                modified: "2024-01-15T14:30:00Z",
                tags: ["项目", "讨论"],
                isFavorited: true
            }
        }
    }
};
```

### MD直存格式扩展
```markdown
# 节点标题

## 主要内容
节点的主要内容...

## 会话记录

### 会话索引
- session_20240115_143000: 项目讨论会话 [⭐] [2024-01-15 14:30]
- session_20240115_101500: 技术方案讨论 [2024-01-15 10:15]
- session_20240114_164500: 需求分析会话 [⭐] [2024-01-14 16:45]

### 会话内容

#### session_20240115_143000
**类型**: note  
**标签**: #项目 #讨论  
**收藏**: true  
**时间**: 2024-01-15T14:30:00Z

项目讨论的具体内容...

#### session_20240115_101500
**类型**: interaction  
**标签**: #技术 #方案  
**收藏**: false  
**时间**: 2024-01-15T10:15:00Z

问题：如何优化系统性能？

[AI回答]
可以通过以下几个方面来优化...
```

## 🎛️ 关键功能实现

### 1. 利用现有UI组件
```javascript
// 利用现有的会话列表标签页
function initializeSessionSystem() {
    // 1. 绑定现有"会话列表"标签页
    const sessionTab = document.querySelector('[data-tab="sessions"]');
    const sessionContainer = document.querySelector('#inner-tab-sessions .sessions-container');
    
    // 2. 关联现有问答模式开关
    const interactionModeToggle = document.querySelector('#interaction-mode-toggle');
    
    // 3. 在内容框添加全屏按钮
    addFullscreenButton();
    
    // 4. 绑定事件监听器
    bindSessionEvents();
}
```

### 2. 会话列表渲染
```javascript
// 渲染会话列表到现有容器
function renderSessionList(nodeId) {
    const sessionsContainer = document.querySelector('#inner-tab-sessions .sessions-container');
    const nodeData = nodeDatabase[nodeId];
    
    if (!nodeData || !nodeData.sessions) return;
    
    // 按时间降序排列
    const sortedSessions = nodeData.sessions.list
        .map(id => nodeData.sessions.data[id])
        .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    
    sessionsContainer.innerHTML = sortedSessions.map(session => `
        <div class="session-item" data-session-id="${session.id}">
            <div class="session-header">
                <span class="session-title">${getSessionIcon(session.type)} ${session.title}</span>
                <div class="session-actions">
                    <button class="session-favorite ${session.isFavorited ? 'active' : ''}" 
                            onclick="toggleSessionFavorite('${session.id}')">⭐</button>
                    <button class="session-delete ${session.isFavorited ? 'disabled' : ''}" 
                            onclick="deleteSession('${session.id}')">🗑️</button>
                </div>
            </div>
            <div class="session-time">${formatTime(session.timestamp)}</div>
        </div>
    `).join('');
}
```

### 3. 模式切换机制
```javascript
// 关联现有问答模式开关
function bindInteractionModeToggle() {
    const toggle = document.querySelector('#interaction-mode-toggle');
    if (toggle) {
        toggle.addEventListener('change', function(e) {
            const currentNodeId = selectedNodeId;
            if (currentNodeId && nodeDatabase[currentNodeId]) {
                nodeDatabase[currentNodeId].sessions.mode = e.target.checked ? 'interaction' : 'note';
                updateModeUI(e.target.checked);
                console.log('会话模式切换:', e.target.checked ? '问答模式' : '笔记模式');
            }
        });
    }
}
```

### 4. 会话切换联动
```javascript
// 会话列表项点击联动
function bindSessionItemClick() {
    document.addEventListener('click', function(e) {
        const sessionItem = e.target.closest('.session-item');
        if (sessionItem) {
            const sessionId = sessionItem.getAttribute('data-session-id');
            switchToSession(sessionId);
        }
    });
}

function switchToSession(sessionId) {
    const currentNodeId = selectedNodeId;
    if (!currentNodeId || !nodeDatabase[currentNodeId]) return;
    
    // 更新活跃会话
    nodeDatabase[currentNodeId].sessions.active = sessionId;
    
    // 获取会话内容
    const sessionData = nodeDatabase[currentNodeId].sessions.data[sessionId];
    if (sessionData) {
        // 更新内容框显示
        const contentEditor = document.getElementById('content-editor');
        if (contentEditor) {
            contentEditor.value = sessionData.content;
        }
        
        // 更新标签作用域为会话级
        updateTagScope('session', sessionId);
        
        // 高亮当前会话项
        highlightActiveSession(sessionId);
        
        console.log('切换到会话:', sessionData.title);
    }
}
```

### 5. 全屏模式实现
```javascript
// 在内容框右上角添加全屏按钮
function addFullscreenButton() {
    const contentContainer = document.querySelector('#content-editor').parentElement;
    const fullscreenBtn = document.createElement('button');
    fullscreenBtn.innerHTML = '🔍';
    fullscreenBtn.className = 'fullscreen-btn';
    fullscreenBtn.style.cssText = `
        position: absolute;
        top: 10px;
        right: 10px;
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        padding: 8px;
        cursor: pointer;
        z-index: 100;
    `;
    fullscreenBtn.onclick = enterFullscreenMode;
    
    contentContainer.style.position = 'relative';
    contentContainer.appendChild(fullscreenBtn);
}

// 全屏模式实现
function enterFullscreenMode() {
    const modal = document.createElement('div');
    modal.className = 'session-fullscreen-modal';
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.8);
        z-index: 9999;
        display: flex;
        align-items: center;
        justify-content: center;
    `;
    
    const content = document.createElement('div');
    content.style.cssText = `
        background: white;
        border-radius: 12px;
        width: 90%;
        height: 80%;
        display: flex;
        overflow: hidden;
    `;
    
    // 克隆并放大内容框和会话列表
    const contentArea = cloneAndScale('#content-editor', 1.2);
    const sessionList = cloneAndScale('#inner-tab-sessions', 1.2);
    
    content.appendChild(contentArea);
    content.appendChild(sessionList);
    
    // 添加关闭按钮
    const closeBtn = document.createElement('button');
    closeBtn.innerHTML = '❌';
    closeBtn.style.cssText = `
        position: absolute;
        top: 20px;
        right: 20px;
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: white;
    `;
    closeBtn.onclick = () => document.body.removeChild(modal);
    
    modal.appendChild(content);
    modal.appendChild(closeBtn);
    document.body.appendChild(modal);
}
```

### 6. 防误删保护
```javascript
// 完整的删除保护机制
function deleteSession(sessionId) {
    const currentNodeId = selectedNodeId;
    if (!currentNodeId || !nodeDatabase[currentNodeId]) return;
    
    const sessionData = nodeDatabase[currentNodeId].sessions.data[sessionId];
    if (!sessionData) return;
    
    // 1. 检查收藏状态
    if (sessionData.isFavorited) {
        showMessage('❌ 收藏的会话不能删除，请先取消收藏');
        return;
    }
    
    // 2. 删除确认
    if (!confirm(`确定删除会话"${sessionData.title}"吗？\n\n此操作不可撤销！`)) {
        return;
    }
    
    // 3. 执行软删除
    sessionData.deleted = true;
    sessionData.deletedAt = new Date().toISOString();
    
    // 4. 从列表中移除
    const sessionIndex = nodeDatabase[currentNodeId].sessions.list.indexOf(sessionId);
    if (sessionIndex > -1) {
        nodeDatabase[currentNodeId].sessions.list.splice(sessionIndex, 1);
    }
    
    // 5. 如果删除的是当前活跃会话，切换到最新会话
    if (nodeDatabase[currentNodeId].sessions.active === sessionId) {
        const remainingSessions = nodeDatabase[currentNodeId].sessions.list;
        if (remainingSessions.length > 0) {
            switchToSession(remainingSessions[0]);
        } else {
            // 没有会话时显示节点主内容
            showNodeMainContent();
        }
    }
    
    // 6. 自动备份
    autoBackupData();
    
    // 7. 重新渲染列表
    renderSessionList(currentNodeId);
    
    showMessage('✅ 会话已删除');
    console.log('删除会话:', sessionData.title);
}
```

## 📋 实施计划

### 第一阶段：基础架构（立即实施）
1. **数据模型扩展**
   - ✅ 扩展nodeDatabase支持sessions字段
   - ✅ 实现会话数据结构
   - ✅ 建立会话与节点关联关系

2. **UI集成**
   - ✅ 利用现有"会话列表"标签页组件
   - ✅ 关联现有"问答模式"开关
   - ✅ 在内容框添加全屏按钮

### 第二阶段：核心功能（第二步实施）
1. **会话管理**
   - ✅ 实现会话创建（笔记/问答模式）
   - ✅ 会话列表渲染和时间排序
   - ✅ 点击联动切换功能
   - ✅ 收藏和删除功能

2. **标签集成**
   - ✅ 会话级标签支持（来自标签组）
   - ✅ 标签作用域自动切换
   - ✅ 系统级收藏标签实现

### 第三阶段：高级功能（第三步实施）
1. **全屏模式**
   - ✅ 弹窗布局实现
   - ✅ 内容框和会话列表等比例缩放
   - ✅ 响应式适配

2. **数据安全**
   - ✅ 防误删机制（收藏保护+确认）
   - ✅ 软删除机制
   - ✅ 自动备份功能

## 🎯 验收标准

### 功能验收
- ✅ 利用现有"会话列表"标签页正常显示会话
- ✅ 会话列表按创建时间降序排列
- ✅ 点击会话项正确切换内容框显示
- ✅ 问答模式开关正确控制会话创建类型
- ✅ 笔记模式直接创建会话块
- ✅ 问答模式AI交互创建会话块
- ✅ 标签正确作用于当前激活会话
- ✅ 收藏会话显示星标且不可删除
- ✅ 全屏模式弹窗正常工作
- ✅ 会话列表在全屏模式中显示在右侧

### 性能验收
- ✅ 会话切换响应时间 < 200ms
- ✅ 大量会话时列表滚动流畅
- ✅ 数据保存不阻塞UI交互

### 兼容性验收
- ✅ 与现有节点系统完全兼容
- ✅ 不影响现有标签同步功能
- ✅ 不影响现有UI组件布局
- ✅ MD导入/导出正确处理会话数据

## 🔧 实施注意事项

### 关键约束
1. **不新增UI组件**：完全利用现有"会话列表"标签页
2. **保持兼容性**：不破坏现有功能和数据结构
3. **遵循MD直存**：所有数据变更符合万能数据底座规范
4. **标签作用域**：正确区分节点级和会话级标签

### 技术要点
1. **现有组件复用**：会话列表容器已存在，只需渲染内容
2. **事件绑定策略**：利用事件委托避免重复绑定
3. **数据同步时机**：会话切换时立即同步，编辑时延迟同步
4. **错误处理**：完善的降级机制和数据恢复

---

**文档版本**: v2.0（修正版）  
**最后更新**: 2024-01-15  
**关键修正**: 利用现有UI组件，不新增会话列表组件  
**准备状态**: ✅ 可以开始实施