        // 设置自动保存
        function setupAutoSave() {
            console.log('🚀 初始化自动保存系统...');
            
            // 检查存储状态和路径
            checkStorageStatus();
            
            // 定期自动保存（每30秒）
            setInterval(function() {
                console.log('⏰ 定时自动保存触发');
                autoSaveCurrentNodeDetails(); // 保存当前编辑内容
                autoSaveData();
            }, 30000);
            
            // 页面离开时保存
            window.addEventListener('beforeunload', function() {
                console.log('🚪 页面即将关闭，执行最终保存');
                autoSaveCurrentNodeDetails(); // 保存当前编辑内容
                autoSaveData();
                // 如果有已知文件路径，执行文件自动保存
                if (lastSavedFilePath) {
                    autoSaveToFile();
                }
            });
            
            // 页面失去焦点时保存
            window.addEventListener('blur', function() {
                console.log('👁️ 页面失去焦点，执行自动保存');
                autoSaveCurrentNodeDetails(); // 保存当前编辑内容
                autoSaveData();
            });
            
            // 启动文件自动保存定时器
            setupFileAutoSave();
            
            console.log('✅ 自动保存系统初始化完成');
        }
        
        // 设置文件自动保存定时器
        function setupFileAutoSave() {
            // 清除现有定时器
            if (autoSaveFileTimer) {
                clearInterval(autoSaveFileTimer);
            }
            
            // 设置2分钟定时自动保存到文件
            autoSaveFileTimer = setInterval(function() {
                if (lastSavedFilePath) {
                    autoSaveToFile();
                }
            }, 120000); // 2分钟 = 120000毫秒
            
            console.log('🕒 文件自动保存定时器已启动（每2分钟）');
        }
        
        // 自动保存到文件
        function autoSaveToFile() {
            try {
                // 先保存当前编辑内容到内存
                autoSaveCurrentNodeDetails();
                autoSaveData();
                
                // 使用与exportToCustomFile相同的完整数据结构
                var mind_data = getCurrentJsMind().get_data();
                if (!mind_data) {
                    console.log('⚠️ 无脑图数据可保存');
                    return;
                }
                
                // 使用融合数据结构保存 - 确保原生字段和扩展字段完整保存
                var exportData = {
                    mindmap: mind_data,
                    nodeDetails: nodeDatabase,  // 已包含融合结构的完整数据
                    exportInfo: {
                        timestamp: new Date().toISOString(),
                        version: "1.0.0",
                        exported_by: "NodeMind",
                        export_type: "auto_save",
                        current_tab: currentMindmap,
                        unified_structure: true  // 标记：使用融合数据结构
                    }
                };
                
                var content = JSON.stringify(exportData, null, 2);
                
                // 根据当前选项卡确定保存文件名
                var fileName = getAutoSaveFileName();
                console.log('💾 自动保存到项目文件:', fileName);
                
                // 使用项目目录自动保存
                autoSaveToProjectFile(content, fileName);
                
            } catch (error) {
                console.error('❌ 文件自动保存失败:', error);
                // 不显示错误消息，避免打断用户工作
            }
        }
        
        // 获取自动保存文件名 - 统一约定格式
        function getAutoSaveFileName() {
            // 统一约定：{项目名称}-jsmind.json
            var projectName = projectInfo.name || currentMindmap || 'nodemind';
            console.log('📋 生成文件名:', {
                'projectInfo.name': projectInfo.name,
                'currentMindmap': currentMindmap,
                'finalName': projectName,
                'fileName': projectName + '-jsmind.json'
            });
            return projectName + '-jsmind.json';
        }
        
        // 获取项目文件的完整路径
        function getProjectFilePath() {
            var fileName = getAutoSaveFileName();
            var projectPath = projectInfo.path;
            
            if (projectPath && projectPath !== '未设置') {
                // 确保路径格式正确
                var normalizedPath = projectPath.replace(/\\/g, '/');
                if (!normalizedPath.endsWith('/')) {
                    normalizedPath += '/';
                }
                return normalizedPath + fileName;
            }
            
            return fileName; // 只返回文件名
        }
        
        // 检查是否有有效的项目路径
        function hasValidProjectPath() {
            return projectInfo.path && projectInfo.path !== '未设置' && projectInfo.path.trim() !== '';
        }
        
        // 自动保存到项目文件
        function autoSaveToProjectFile(content, fileName) {
            try {
                // 检查是否有有效的文件句柄
                if (lastSavedFilePath && lastSavedFilePath.handle) {
                    console.log('🔄 使用已有文件句柄自动保存:', fileName);
                    autoSaveWithModernAPI(content, lastSavedFilePath.handle);
                    return;
                }
                
                // 没有文件句柄时，尝试自动恢复保存功能
                console.log('⚠️ 没有文件句柄，尝试自动恢复保存功能');
                console.log('📁 目标文件:', fileName);
                
                // 尝试自动获取项目文件的访问权限
                tryAutoRestoreFileSave(content, fileName);
                
            } catch (error) {
                console.error('❌ 项目文件保存失败:', error);
            }
        }
        
        // 尝试自动恢复文件保存功能
        async function tryAutoRestoreFileSave(content, fileName) {
            try {
                // 检查是否支持现代文件系统API
                if (!window.showSaveFilePicker) {
                    console.log('⚠️ 浏览器不支持现代文件系统API，使用localStorage备份');
                    backupToLocalStorage(content);
                    return;
                }
                
                // 从项目基本信息中获取项目路径
                var fullPath = getProjectFilePath();
                console.log('🔄 自动保存到项目文件:', fileName);
                console.log('📁 完整路径:', fullPath);
                
                // 检查是否已经有用户授权过的文件句柄
                var hasAuthorizedBefore = localStorage.getItem('nodemind_file_authorized_' + currentMindmap);
                
                if (!hasAuthorizedBefore && hasValidProjectPath()) {
                    // 首次使用且有有效项目路径，自动尝试保存到项目目录
                    console.log('📋 首次使用，自动保存到项目路径:', fullPath);
                    showMessage('📋 自动保存到: ' + fullPath, 3000);
                    
                    const fileHandle = await window.showSaveFilePicker({
                        suggestedName: fileName,
                        startIn: 'documents', // 从文档目录开始，用户可以导航到项目目录
                        types: [
                            {
                                description: 'NodeMind项目文件',
                                accept: {
                                    'application/json': ['.json']
                                }
                            }
                        ]
                    });
                    
                    // 保存文件
                    const writable = await fileHandle.createWritable();
                    await writable.write(content);
                    await writable.close();
                    
                    // 记录文件句柄和授权状态
                    lastSavedFilePath = {
                        handle: fileHandle,
                        name: fileName
                    };
                    
                    localStorage.setItem(STORAGE_KEYS.LAST_SAVED_PATH, JSON.stringify({
                        name: fileName,
                        timestamp: new Date().toISOString(),
                        projectPath: projectInfo.path,
                        fullPath: fullPath
                    }));
                    
                    localStorage.setItem('nodemind_file_authorized_' + currentMindmap, 'true');
                    
                    console.log('✅ 自动保存功能已启用:', fileName);
                    showMessage('✅ 自动保存功能已启用: ' + fileName, 3000);
                    
                } else if (!hasValidProjectPath()) {
                    // 没有项目路径信息，提示用户
                    console.log('⚠️ 未获取到有效的项目路径信息');
                    showMessage('⚠️ 未获取到项目路径，数据已保存到本地缓存', 3000);
                    backupToLocalStorage(content);
                    
                } else {
                    // 已经授权过，直接保存到localStorage备份
                    console.log('💾 已授权过，保存到localStorage备份');
                    backupToLocalStorage(content);
                    
                    // 静默保存，减少提示
                    console.log('💡 提示：可通过"📁 自定义存储"重新连接到项目文件');
                }
                
            } catch (error) {
                if (error.name === 'AbortError') {
                    console.log('🚫 用户取消了文件选择，使用localStorage备份');
                } else {
                    console.error('❌ 自动恢复失败:', error);
                }
                
                // 回退到localStorage备份
                backupToLocalStorage(content);
            }
        }
        
        // 备份到localStorage
        function backupToLocalStorage(content) {
            var backupKey = 'nodemind_backup_' + currentMindmap;
            localStorage.setItem(backupKey, content);
            console.log('💾 已备份到localStorage:', backupKey);
            
            // 静默保存，不频繁提示用户
            // 只在特殊情况下才提示（比如用户长时间工作后）
            var sessionStartKey = 'nodemind_session_start_' + currentMindmap;
            var sessionStart = localStorage.getItem(sessionStartKey);
            var now = Date.now();
            
            if (!sessionStart) {
                localStorage.setItem(sessionStartKey, now.toString());
                return;
            }
            
            // 工作超过30分钟且没有文件连接时，才提示一次
            var workDuration = now - parseInt(sessionStart);
            var hasPrompted = localStorage.getItem('nodemind_long_session_prompted_' + currentMindmap);
            
            if (workDuration > 30 * 60 * 1000 && !hasPrompted) {
                var fileName = getAutoSaveFileName();
                showMessage('💡 长时间工作建议：点击"📁 自定义存储"连接项目文件 ' + fileName + ' 以启用文件保存', 5000);
                localStorage.setItem('nodemind_long_session_prompted_' + currentMindmap, 'true');
            }
        }
        
        // 使用现代API自动保存
        async function autoSaveWithModernAPI(content, fileHandle) {
            try {
                const writable = await fileHandle.createWritable();
                await writable.write(content);
                await writable.close();
                
                console.log('✅ 文件已自动保存:', lastSavedFilePath.name);
                // 显示简短的成功提示
                showMessage('💾 已自动保存', 2000);
                
            } catch (error) {
                console.error('❌ 现代API自动保存失败:', error);
                // 不再回退到传统方式，避免下载文件
            }
        }
        


        // 当前正在编辑的节点ID（用于自动保存）
        var currentEditingNodeId = null;
        
        // 自动保存当前编辑节点的详细内容并同步到所有工作区
        function autoSaveCurrentNodeDetails() {
            if (!currentEditingNodeId) {
                console.log('⚠️ 没有当前编辑节点ID，跳过自动保存');
                return;
            }
            
            try {
                var titleEl = document.getElementById('node_title_' + currentEditingNodeId);
                var contentEl = document.getElementById('node_content_' + currentEditingNodeId);
                var authorEl = document.getElementById('node_author_' + currentEditingNodeId);
                
                console.log('🔍 检查节点元素:', {
                    nodeId: currentEditingNodeId,
                    titleEl: !!titleEl,
                    contentEl: !!contentEl,
                    authorEl: !!authorEl,
                    nodeInDB: !!nodeDatabase[currentEditingNodeId]
                });
                
                if (titleEl && contentEl && authorEl && nodeDatabase[currentEditingNodeId]) {
                    var hasChanges = false;
                    var changes = [];
                    
                    // 检查并更新标题
                    if (titleEl.value !== nodeDatabase[currentEditingNodeId].title) {
                        var oldTitle = nodeDatabase[currentEditingNodeId].title;
                        nodeDatabase[currentEditingNodeId].title = titleEl.value;
                        hasChanges = true;
                        changes.push(`标题: "${oldTitle}" → "${titleEl.value}"`);
                        
                        // 同步更新所有工作区中的相同节点标题
                        Object.keys(mindmaps).forEach(function(tabName) {
                            var mindmap = mindmaps[tabName];
                            var targetNode = mindmap.get_node(currentEditingNodeId);
                            if (targetNode && targetNode.topic !== titleEl.value) {
                                mindmap.update_node(currentEditingNodeId, titleEl.value);
                            }
                        });
                    }
                    
                    // 检查并更新详细内容
                    if (contentEl.value !== nodeDatabase[currentEditingNodeId].content) {
                        var oldContent = nodeDatabase[currentEditingNodeId].content;
                        nodeDatabase[currentEditingNodeId].content = contentEl.value;
                        hasChanges = true;
                        changes.push(`内容: ${oldContent.length}字符 → ${contentEl.value.length}字符`);
                    }
                    
                    // 检查并更新作者
                    if (authorEl.value !== nodeDatabase[currentEditingNodeId].author) {
                        var oldAuthor = nodeDatabase[currentEditingNodeId].author;
                        nodeDatabase[currentEditingNodeId].author = authorEl.value;
                        hasChanges = true;
                        changes.push(`作者: "${oldAuthor}" → "${authorEl.value}"`);
                    }
                    
                    if (hasChanges) {
                        nodeDatabase[currentEditingNodeId].time.modified = new Date().toLocaleString();
                        console.log('✅ 自动保存节点详细内容:', currentEditingNodeId, changes);
                        // 触发持久化存储
                        setTimeout(autoSaveData, 100);
                        
                        // 显示保存提示
                        showMessage('💾 内容已自动保存', 1500);
                    } else {
                        console.log('ℹ️ 节点内容无变化，跳过保存:', currentEditingNodeId);
                    }
                } else {
                    console.warn('⚠️ 自动保存条件不满足:', {
                        nodeId: currentEditingNodeId,
                        titleEl: !!titleEl,
                        contentEl: !!contentEl,
                        authorEl: !!authorEl,
                        nodeInDB: !!nodeDatabase[currentEditingNodeId]
                    });
                }
            } catch (error) {
                console.error('❌ 自动保存节点详细内容失败:', error);
                showMessage('❌ 自动保存失败', 2000);
            }
        }

        // 为所有脑图实例添加事件监听
        function addEventListenersToAllMindmaps() {
            Object.keys(mindmaps).forEach(function(tabName) {
                var mindmap = mindmaps[tabName];
                
                mindmap.add_event_listener(function(type, data) {
                    // 确保当前脑图标签被激活
                    if (currentMindmap !== tabName) {
                        switchMindmapTab(tabName);
                    }
                    
                    if (type === 'select_node') {
                        // 在切换到新节点前，先自动保存当前编辑节点的详细内容
                        autoSaveCurrentNodeDetails();
                        
                        updateSelectedNodeDisplay();
                        showNodeDetails(data.node.id);
                        console.log('选中' + tabName + '节点:', data.node.topic);
                        // 自动保存选中状态
                        setTimeout(autoSaveData, 100);
                    } else if (type === 'edit_node') {
                        showNodeDetails(data.node.id);
                        console.log('编辑' + tabName + '节点:', data.node.topic);
                        // 自动保存编辑
                        setTimeout(autoSaveData, 500);
                    } else if (type === 'move_node') {
                        showMessage('🔀 节点已移动: ' + data.node.topic);
                        console.log('移动' + tabName + '节点:', data.node.topic, '到新位置');
                        updateSelectedNodeDisplay();
                        updateNodeRelations(data.node.id);
                        if (data.parent_node) {
                            updateNodeRelations(data.parent_node.id);
                        }
                        // 自动保存移动操作
                        setTimeout(autoSaveData, 200);
                    } else if (type === 'add_node') {
                        updateNodeRelations(data.node.id);
                        if (data.parent_node) {
                            updateNodeRelations(data.parent_node.id);
                        }
                        showNodeDetails(data.node.id);
                        // 自动保存新增节点
                        setTimeout(autoSaveData, 200);
                    } else if (type === 'remove_node') {
                        if (data.parent_node) {
                            updateNodeRelations(data.parent_node.id);
                        }
                        // 自动保存删除操作
                        setTimeout(autoSaveData, 200);
                    }
                });
            });
        }
        
        // 为所有脑图添加事件监听器
        addEventListenersToAllMindmaps();

        // 持久化存储相关常量
        var STORAGE_KEYS = {
            MINDMAP_DATA: 'nodemind_mindmap_data',
            NODE_DATABASE: 'nodemind_node_database', 
            CURRENT_THEME: 'nodemind_current_theme',
            DRAG_ENABLED: 'nodemind_drag_enabled',
            SELECTED_NODE: 'nodemind_selected_node',
            VIEW_DATA: 'nodemind_view_data',
            LAST_SAVED_PATH: 'nodemind_last_saved_path'
        };
        
        // 文件路径记录和自动保存相关变量
        var lastSavedFilePath = null;
        var autoSaveFileTimer = null;
        
        // 检查localStorage存储状态和路径
        function checkStorageStatus() {
            try {
                console.log('🔍 检查localStorage存储状态:');
                console.log('📁 存储可用性:', typeof(Storage) !== "undefined");
                console.log('📁 localStorage对象:', !!localStorage);
                
                // 检查存储配额
                if (navigator.storage && navigator.storage.estimate) {
                    navigator.storage.estimate().then(function(estimate) {
                        console.log('💾 存储配额:', {
                            quota: Math.round(estimate.quota / 1024 / 1024) + 'MB',
                            usage: Math.round(estimate.usage / 1024 / 1024) + 'MB',
                            available: Math.round((estimate.quota - estimate.usage) / 1024 / 1024) + 'MB'
                        });
                    });
                }
                
                // 检查现有存储的键
                console.log('🗂️ 现有localStorage键:');
                for (var i = 0; i < localStorage.length; i++) {
                    var key = localStorage.key(i);
                    if (key.startsWith('nodemind_')) {
                        var value = localStorage.getItem(key);
                        console.log(`  ${key}: ${value ? value.length + '字符' : '空值'}`);
                    }
                }
                
                // 检查STORAGE_KEYS配置
                console.log('⚙️ STORAGE_KEYS配置:', STORAGE_KEYS);
                
                return true;
            } catch (error) {
                console.error('❌ 存储状态检查失败:', error);
                return false;
            }
        }
        
        // 自动保存函数
        function autoSaveData() {
            try {
                // 保存所有脑图的数据
                var allMindmapData = {};
                Object.keys(mindmaps).forEach(function(tabName) {
                    if (mindmaps[tabName]) {
                        allMindmapData[tabName] = mindmaps[tabName].get_data();
                    }
                });
                
                if (Object.keys(allMindmapData).length > 0) {
                    // 验证存储键配置
                    console.log('🔍 存储键配置检查:', STORAGE_KEYS);
                    
                    // 保存所有思维导图数据
                    localStorage.setItem(STORAGE_KEYS.MINDMAP_DATA, JSON.stringify(allMindmapData));
                    console.log('💾 已保存思维导图数据到:', STORAGE_KEYS.MINDMAP_DATA);
                    
                    // 保存节点详细信息数据库
                    localStorage.setItem(STORAGE_KEYS.NODE_DATABASE, JSON.stringify(nodeDatabase));
                    console.log('💾 已保存节点数据库到:', STORAGE_KEYS.NODE_DATABASE);
                    
                    // 保存当前主题
                    localStorage.setItem(STORAGE_KEYS.CURRENT_THEME, currentThemeIndex.toString());
                    console.log('💾 已保存主题设置到:', STORAGE_KEYS.CURRENT_THEME);
                    
                    // 保存拖拽状态
                    localStorage.setItem(STORAGE_KEYS.DRAG_ENABLED, isDragEnabled.toString());
                    console.log('💾 已保存拖拽状态到:', STORAGE_KEYS.DRAG_ENABLED);
                    
                    // 保存当前活跃的脑图选项卡
                    localStorage.setItem('nodemind_current_mindmap', currentMindmap);
                    console.log('💾 已保存当前脑图到: nodemind_current_mindmap');
                    
                    // 保存选中节点
                    var selectedNode = getCurrentJsMind().get_selected_node();
                    if (selectedNode) {
                        localStorage.setItem(STORAGE_KEYS.SELECTED_NODE, selectedNode.id);
                        console.log('💾 已保存选中节点到:', STORAGE_KEYS.SELECTED_NODE, '节点ID:', selectedNode.id);
                    }
                    
                    // 验证存储是否成功
                    var verifyData = localStorage.getItem(STORAGE_KEYS.MINDMAP_DATA);
                    if (verifyData) {
                        console.log('✅ 存储验证成功，数据大小:', verifyData.length, '字符');
                    } else {
                        console.error('❌ 存储验证失败，数据未保存');
                    }
                    
                    console.log('✅ 数据已自动保存（包含所有脑图）');
                } else {
                    console.warn('⚠️ 没有脑图数据可保存');
                }
            } catch (error) {
                console.error('❌ 自动保存失败:', error);
                console.error('❌ 错误详情:', {
                    message: error.message,
                    stack: error.stack,
                    storageKeys: STORAGE_KEYS
                });
            }
        }
        
        // 加载保存的数据
        function loadSavedData() {
            try {
                // 加载思维导图数据
                var savedMindmapData = localStorage.getItem(STORAGE_KEYS.MINDMAP_DATA);
                var savedNodeDatabase = localStorage.getItem(STORAGE_KEYS.NODE_DATABASE);
                var savedTheme = localStorage.getItem(STORAGE_KEYS.CURRENT_THEME);
                var savedDragState = localStorage.getItem(STORAGE_KEYS.DRAG_ENABLED);
                var savedSelectedNode = localStorage.getItem(STORAGE_KEYS.SELECTED_NODE);
                var savedCurrentMindmap = localStorage.getItem('nodemind_current_mindmap');
                
                var hasRecoveredData = false;
                
                // 恢复多工作区思维导图数据
                if (savedMindmapData) {
                    try {
                        var allMindmapData = JSON.parse(savedMindmapData);
                        
                        // 恢复每个工作区的数据
                        if (allMindmapData && typeof allMindmapData === 'object') {
                            Object.keys(allMindmapData).forEach(function(tabName) {
                                var mindmapData = allMindmapData[tabName];
                                if (mindmapData && mindmapData.data && mindmaps[tabName]) {
                                    mindmaps[tabName].show(mindmapData);
                                    hasRecoveredData = true;
                                    console.log('✅ ' + tabName + ' 工作区数据已恢复');
                                }
                            });
                            
                            // 恢复当前活跃工作区
                            if (savedCurrentMindmap && mindmaps[savedCurrentMindmap]) {
                                currentMindmap = savedCurrentMindmap;
                                switchMindmapTab(currentMindmap);
                                console.log('✅ 当前工作区已恢复为:', currentMindmap);
                            }
                        }
                    } catch (e) {
                        console.error('思维导图数据恢复失败:', e);
                    }
                }
                
                // 恢复节点详细信息数据库
                if (savedNodeDatabase) {
                    try {
                        nodeDatabase = JSON.parse(savedNodeDatabase);
                        console.log('✅ 节点详细信息已恢复');
                        // 确保恢复的数据符合融合数据结构
                        validateAndFixNodeDatabase();
                    } catch (e) {
                        console.error('节点详细信息恢复失败:', e);
                        nodeDatabase = {};
                    }
                }
                
                // 恢复主题设置
                if (savedTheme) {
                    try {
                        var themeIndex = parseInt(savedTheme);
                        if (themeIndex >= 0 && themeIndex < themes.length) {
                            currentThemeIndex = themeIndex;
                            jm.set_theme(themes[currentThemeIndex].name);
                            console.log('✅ 主题设置已恢复:', themes[currentThemeIndex].label);
                        }
                    } catch (e) {
                        console.error('主题设置恢复失败:', e);
                    }
                }
                
                // 恢复拖拽状态
                if (savedDragState) {
                    try {
                        isDragEnabled = (savedDragState === 'true');
                        if (isDragEnabled) {
                            jm.enable_draggable_node();
                        } else {
                            jm.disable_draggable_node();
                        }
                        updateDragStatusDisplay();
                        console.log('✅ 拖拽状态已恢复:', isDragEnabled ? '启用' : '禁用');
                    } catch (e) {
                        console.error('拖拽状态恢复失败:', e);
                    }
                }
                
                // 恢复选中节点
                if (savedSelectedNode && hasRecoveredData) {
                    setTimeout(function() {
                        try {
                            var node = jm.get_node(savedSelectedNode);
                            if (node) {
                                jm.select_node(savedSelectedNode);
                                showNodeDetails(savedSelectedNode);
                                console.log('✅ 选中节点已恢复:', node.topic);
                            }
                        } catch (e) {
                            console.error('选中节点恢复失败:', e);
                        }
                    }, 300);
                }
                
                // 恢复文件路径信息
                var savedFilePath = localStorage.getItem(STORAGE_KEYS.LAST_SAVED_PATH);
                if (savedFilePath) {
                    try {
                        var filePathData = JSON.parse(savedFilePath);
                        lastSavedFilePath = {
                            handle: null, // 页面重新加载后无法恢复handle
                            name: filePathData.name
                        };
                        console.log('✅ 文件路径已恢复，自动保存已启用:', filePathData.name);
                    } catch (e) {
                        console.error('文件路径恢复失败:', e);
                    }
                }
                
                // 无论是否恢复数据，都要执行工具初始化（声明融合数据结构）
                initializeNodeMindTool();
                
                if (hasRecoveredData) {
                    showMessage('🔄 已从本地存储恢复上次的思维导图状态');
                } else {
                    // 如果没有保存的数据，初始化默认数据
                    initNodeDatabase();
                }
                
                return hasRecoveredData;
                
            } catch (error) {
                console.error('数据恢复失败:', error);
                showMessage('❌ 数据恢复失败，使用默认数据');
                // 无论如何都要执行工具初始化
                initializeNodeMindTool();
                initNodeDatabase();
                return false;
            }
        }
        

        
        // 保存所有可能正在编辑的节点详细内容到nodeDatabase
        function saveAllEditingNodeDetails() {
            // 保存当前正在编辑的节点
            autoSaveCurrentNodeDetails();
            
            // 遍历所有表单元素，确保所有编辑内容都被保存
            var allTitleInputs = document.querySelectorAll('[id^="node_title_"]');
            var allContentInputs = document.querySelectorAll('[id^="node_content_"]');
            var allAuthorInputs = document.querySelectorAll('[id^="node_author_"]');
            
            allTitleInputs.forEach(function(input) {
                var nodeId = input.id.replace('node_title_', '');
                if (nodeDatabase[nodeId] && input.value !== nodeDatabase[nodeId].title) {
                    nodeDatabase[nodeId].title = input.value;
                    nodeDatabase[nodeId].time.modified = new Date().toLocaleString();
                }
            });
            
            allContentInputs.forEach(function(input) {
                var nodeId = input.id.replace('node_content_', '');
                if (nodeDatabase[nodeId] && input.value !== nodeDatabase[nodeId].content) {
                    nodeDatabase[nodeId].content = input.value;
                    nodeDatabase[nodeId].time.modified = new Date().toLocaleString();
                }
            });
            
            allAuthorInputs.forEach(function(input) {
                var nodeId = input.id.replace('node_author_', '');
                if (nodeDatabase[nodeId] && input.value !== nodeDatabase[nodeId].author) {
                    nodeDatabase[nodeId].author = input.value;
                    nodeDatabase[nodeId].time.modified = new Date().toLocaleString();
                }
            });
        }


        // 自定义存储功能 - 使用文件选择器保存
        function exportToCustomFile() {
            try {
                // 先保存所有可能正在编辑的节点详细内容到nodeDatabase
                saveAllEditingNodeDetails();
                
                var mind_data = getCurrentJsMind().get_data();
                if (!mind_data) {
                    showMessage('❌ 无数据可导出');
                    return;
                }
                
                // 构建导出数据
                var exportData = {
                    mindmap: mind_data,
                    nodeDetails: nodeDatabase,
                    exportInfo: {
                        timestamp: new Date().toISOString(),
                        version: "1.0.0",
                        exported_by: "NodeMind",
                        export_type: "custom_with_file_selector",
                        current_tab: currentMindmap
                    }
                };
                
                var mind_str = JSON.stringify(exportData, null, 2);
                
                // 使用统一的文件名约定：{项目名称}-jsmind.json
                var finalFileName = getAutoSaveFileName();
                
                console.log('📁 准备保存文件:', finalFileName);
                showMessage('📁 正在准备保存文件: ' + finalFileName);
                
                // 检查是否支持文件系统访问API（现代浏览器）
                if (window.showSaveFilePicker) {
                    // 使用现代文件系统访问API
                    saveFileWithModernAPI(mind_str, finalFileName);
                } else {
                    // 使用传统下载方式
                    saveFileWithTraditionalMethod(mind_str, finalFileName);
                }
                
                console.log('📊 导出数据概览:', {
                    tab: currentMindmap,
                    nodeCount: Object.keys(nodeDatabase).length,
                    timestamp: exportData.exportInfo.timestamp
                });
                
            } catch (error) {
                console.error('❌ 自定义存储失败:', error);
                showMessage('❌ 自定义存储失败: ' + error.message);
            }
        }
        
        // 使用现代文件系统访问API保存文件
        async function saveFileWithModernAPI(content, fileName) {
            try {
                const fileHandle = await window.showSaveFilePicker({
                    suggestedName: fileName,
                    types: [
                        {
                            description: 'NodeMind思维导图文件',
                            accept: {
                                'application/json': ['.json']
                            }
                        }
                    ]
                });
                
                const writable = await fileHandle.createWritable();
                await writable.write(content);
                await writable.close();
                
                // 记录保存路径，启用自动保存
                lastSavedFilePath = {
                    handle: fileHandle,
                    name: fileName
                };
                localStorage.setItem(STORAGE_KEYS.LAST_SAVED_PATH, JSON.stringify({
                    name: fileName,
                    timestamp: new Date().toISOString()
                }));
                
                showMessage('✅ 文件已成功保存到指定位置');
                console.log('✅ 使用现代API保存文件成功，已启用自动保存');
                
            } catch (error) {
                if (error.name === 'AbortError') {
                    showMessage('🚫 用户取消了文件保存');
                    console.log('🚫 用户取消了文件保存');
                } else {
                    console.error('现代API保存失败，回退到传统方式:', error);
                    saveFileWithTraditionalMethod(content, fileName);
                }
            }
        }
        
        // 使用传统下载方式保存文件
        function saveFileWithTraditionalMethod(content, fileName) {
            try {
                // 创建Blob对象
                var blob = new Blob([content], { type: 'application/json;charset=utf-8' });
                
                // 创建下载链接
                var url = URL.createObjectURL(blob);
                var downloadLink = document.createElement('a');
                downloadLink.href = url;
                downloadLink.download = fileName;
                downloadLink.style.display = 'none';
                
                // 添加到DOM并触发下载
                document.body.appendChild(downloadLink);
                downloadLink.click();
                
                // 清理
                setTimeout(function() {
                    document.body.removeChild(downloadLink);
                    URL.revokeObjectURL(url);
                }, 100);
                
                // 记录保存路径（传统方式只能记录文件名）
                lastSavedFilePath = {
                    handle: null,
                    name: fileName
                };
                localStorage.setItem(STORAGE_KEYS.LAST_SAVED_PATH, JSON.stringify({
                    name: fileName,
                    timestamp: new Date().toISOString()
                }));
                
                showMessage('✅ 文件下载已开始: ' + fileName);
                console.log('✅ 使用传统方式下载文件，已启用自动保存:', fileName);
                
            } catch (error) {
                console.error('传统下载方式也失败:', error);
                showMessage('❌ 文件保存失败: ' + error.message);
            }
        }
        
        // 创建新脑图功能
        function createNewMindmap() {
            try {
                // 先自动保存当前编辑内容
                autoSaveCurrentNodeDetails();
                
                // 询问用户是否确认创建新脑图
                var confirmCreate = confirm('🤔 确定要创建新脑图吗？\n\n当前脑图的数据将被保存，新脑图将在当前选项卡中显示。\n\n点击"确定"继续，点击"取消"返回。');
                
                if (!confirmCreate) {
                    showMessage('🚫 用户取消了新脑图创建');
                    return;
                }
                
                // 生成新脑图的基本信息
                var timestamp = new Date().toLocaleString();
                var newMindmapId = 'new_mindmap_' + Date.now();
                
                // 创建新脑图数据结构 - 只有根节点
                var newMindmapData = {
                    meta: {
                        name: "新建思维导图",
                        author: "NodeMind用户",
                        version: "1.0.0",
                        created: timestamp
                    },
                    format: "node_tree",
                    data: {
                        id: newMindmapId + "_root",
                        topic: "💡 新建思维导图",
                        children: []
                    }
                };
                
                // 在当前活跃的脑图中显示新脑图
                var currentMindmapInstance = getCurrentJsMind();
                currentMindmapInstance.show(newMindmapData);
                
                // 为根节点创建数据库记录
                var rootNodeId = newMindmapId + "_root";
                var rootNode = currentMindmapInstance.get_node(rootNodeId);
                
                if (rootNode) {
                    nodeDatabase[rootNodeId] = {
                        id: rootNodeId,
                        title: rootNode.topic,
                        content: '',
                        relations: {
                            parent: null,
                            children: []
                        },
                        tags: {
                            categories: [],
                            technical: [],
                            status: []
                        },
                        time: {
                            created: timestamp,
                            modified: timestamp
                        },
                        author: 'NodeMind用户'
                    };
                }
                
                // 自动选中根节点
                setTimeout(function() {
                    currentMindmapInstance.select_node(rootNodeId);
                    showNodeDetails(rootNodeId);
                    updateSelectedNodeDisplay();
                }, 300);
                
                // 自动保存新脑图数据
                setTimeout(autoSaveData, 500);
                
                showMessage('✨ 新脑图创建成功！已在当前选项卡中显示');
                console.log('✨ 新脑图创建成功:', {
                    id: newMindmapId,
                    tab: currentMindmap,
                    rootNodeId: rootNodeId,
                    timestamp: timestamp
                });
                
            } catch (error) {
                console.error('❌ 新脑图创建失败:', error);
                showMessage('❌ 新脑图创建失败: ' + error.message);
            }
        }
        
        // 备用下载函数
        function downloadFile(content, filename, contentType) {
            var blob = new Blob([content], { type: contentType });
            var url = URL.createObjectURL(blob);
            var a = document.createElement('a');
            a.href = url;
            a.download = filename;
            a.style.display = 'none';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }
        

        
        // 切换详情面板显示/隐藏
        function toggleDetailsPanel() {
            var mainLayout = document.querySelector('.main-layout');
            var toggleBtn = document.getElementById('panelToggleBtn');
            
            if (mainLayout.classList.contains('panel-hidden')) {
                // 显示面板
                mainLayout.classList.remove('panel-hidden');
                toggleBtn.innerHTML = '📋 隐藏详情面板';
            } else {
                // 隐藏面板
                mainLayout.classList.add('panel-hidden');
                toggleBtn.innerHTML = '📋 显示详情面板';
            }
            
            // 延迟调整脑图大小以确保布局完成
            setTimeout(function() {
                updateLayoutHeight(); // 重新计算布局高度
                var currentMindmap = getCurrentJsMind();
                if (currentMindmap) {
                    currentMindmap.resize();
                }
            }, 350); // 稍微延长等待时间以确保CSS动画完成
        }
        
        // 显示使用指南
        function showUserGuide() {
            var guideContent = `
                <h3>📖 jsMind 操作指南</h3>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 15px;">
                    <div>
                        <h4>👛️ 鼠标操作</h4>
                        <ul>
                            <li>单击节点选中</li>
                            <li>双击节点编辑内容</li>
                            <li>拖拽画布移动视图</li>
                            <li>滚轮缩放思维导图</li>
                            <li><strong>拖拽节点重新组织结构</strong></li>
                        </ul>
                    </div>
                    <div>
                        <h4>⌨️ 快捷键</h4>
                        <ul>
                            <li>Ctrl+Enter - 添加子节点</li>
                            <li>Enter - 添加兄弟节点</li>
                            <li>F2 - 编辑节点</li>
                            <li>Delete - 删除节点</li>
                            <li>Space - 展开/收起节点</li>
                            <li>方向键 - 选择相邻节点</li>
                            <li><strong>Ctrl+O - 导入文件</strong></li>
                            <li><strong>Ctrl+H - 显示快捷键帮助</strong></li>
                        </ul>
                    </div>
                    <div>
                        <h4>🔀 拖拽功能详解</h4>
                        <ul>
                            <li>按住鼠标左键开始拖拽</li>
                            <li>拖拽到目标节点上方</li>
                            <li>释放鼠标完成移动</li>
                            <li>支持跨分支拖拽移动</li>
                            <li>可开启/关闭拖拽功能</li>
                            <li>自动重新排列布局</li>
                        </ul>
                    </div>
                    <div>
                        <h4>🎨 高级功能</h4>
                        <ul>
                            <li>15种内置主题</li>
                            <li>自定义节点样式</li>
                            <li><strong>本地文件导入 (Ctrl+O)</strong></li>
                            <li><strong>自动持久化存储</strong></li>
                            <li>自定义文件名支持</li>
                            <li>多格式文件导入 (JSON/JM/MM)</li>
                            <li>页面关闭数据保护</li>
                            <li>移动端支持</li>
                            <li>快捷键操作</li>
                            <li>实时状态反馈</li>
                        </ul>
                    </div>
                </div>
            `;
            
            // 创建模态对话框
            var modal = document.createElement('div');
            modal.style.cssText = 'position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.7);z-index:9999;display:flex;justify-content:center;align-items:center;';
            
            var modalContent = document.createElement('div');
            modalContent.style.cssText = 'background:white;border-radius:8px;padding:25px;max-width:80%;max-height:80%;overflow-y:auto;box-shadow:0 5px 15px rgba(0,0,0,0.3);';
            modalContent.innerHTML = guideContent;
            
            var closeButton = document.createElement('button');
            closeButton.textContent = '关闭';
            closeButton.style.cssText = 'margin-top:20px;padding:8px 16px;background:#007bff;color:white;border:none;border-radius:4px;cursor:pointer;';
            closeButton.onclick = function() {
                document.body.removeChild(modal);
            };
            
            modalContent.appendChild(closeButton);
            modal.appendChild(modalContent);
            document.body.appendChild(modal);
            
            // 点击模态框外部关闭
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    document.body.removeChild(modal);
                }
            });
            
            showMessage('📖 显示使用指南');
        }
        
        // 触发文件导入
        function triggerImport() {
            var fileInput = document.getElementById('import_file_input');
            if (fileInput) {
                fileInput.click();
            }
        }
        
        // 处理文件导入
        function handleFileImport(input) {
            var file = input.files[0];
            if (!file) return;
            
            console.log('📂 开始导入文件:', file.name);
            showMessage('📂 正在导入文件: ' + file.name);
            
            var reader = new FileReader();
            reader.onload = function(e) {
                try {
                    var content = e.target.result;
                                    var importedData = null;
                var hasNodeDetails = false; // 在外层作用域定义
                
                // 根据文件扩展名和内容判断格式
                var fileName = file.name.toLowerCase();
                
                if (fileName.endsWith('.json')) {
                    // JSON格式处理
                    importedData = JSON.parse(content);
                    console.log('📋 检测到JSON格式文件');
                    
                    // 检查是否是完整导出格式（包含nodeDetails）
                    if (importedData.mindmap && importedData.nodeDetails) {
                        console.log('📋 检测到完整导出格式，包含节点详细信息');
                        
                        // 恢复节点详细信息数据库
                        Object.assign(nodeDatabase, importedData.nodeDetails);
                        hasNodeDetails = true;
                        
                        // 使用思维导图数据
                        importedData = importedData.mindmap;
                    }
                        
                    } else if (fileName.endsWith('.jm')) {
                        // jsMind原生格式
                        importedData = JSON.parse(content);
                        console.log('📋 检测到jsMind原生格式文件');
                        
                    } else if (fileName.endsWith('.mm')) {
                        // FreeMind格式（简单处理）
                        console.log('📋 检测到FreeMind格式文件');
                        showMessage('⚠️ FreeMind格式需要转换，当前版本暂不支持');
                        return;
                        
                    } else {
                        // 尝试作为JSON解析
                        importedData = JSON.parse(content);
                        console.log('📋 作为JSON格式处理');
                    }
                    
                    // 验证导入数据格式
                    if (!importedData || typeof importedData !== 'object') {
                        throw new Error('无效的文件格式');
                    }
                    
                    // 检查必要的数据结构
                    if (!importedData.data || !importedData.data.id) {
                        throw new Error('文件缺少必要的思维导图数据结构');
                    }
                    
                    // 显示导入的思维导图
                    var currentMindmap = getCurrentJsMind();
                    currentMindmap.show(importedData);
                    
                    // 只有在没有导入nodeDetails时才重新初始化节点数据库
                    if (!hasNodeDetails) {
                        var rootNode = currentMindmap.get_node(importedData.data.id);
                        if (rootNode) {
                            traverseNode(rootNode);
                        }
                    }
                    
                    // 自动保存导入的数据
                    setTimeout(autoSaveData, 500);
                    
                    // 更新状态显示
                    updateSelectedNodeDisplay();
                    
                    // 如果有根节点，选中它
                    if (rootNode) {
                        currentMindmap.select_node(rootNode.id);
                        showNodeDetails(rootNode.id);
                    }
                    
                    // 记录导入的文件路径，启用自动保存
                    lastSavedFilePath = {
                        handle: null, // 导入的文件无法获取handle
                        name: file.name
                    };
                    localStorage.setItem(STORAGE_KEYS.LAST_SAVED_PATH, JSON.stringify({
                        name: file.name,
                        timestamp: new Date().toISOString(),
                        source: 'import'
                    }));
                    
                    showMessage('✅ 文件导入成功: ' + file.name);
                    console.log('✅ 文件导入完成，已启用自动保存:', file.name);
                    
                } catch (error) {
                    console.error('❌ 文件导入失败:', error);
                    showMessage('❌ 文件导入失败: ' + error.message);
                }
            };
            
            reader.onerror = function() {
                console.error('❌ 文件读取失败');
                showMessage('❌ 文件读取失败');
            };
            
            // 开始读取文件
            reader.readAsText(file, 'UTF-8');
            
            // 清空input，允许重复选择同一文件
            input.value = '';
        }
        
        // 页面加载完成
        window.addEventListener('load', function() {
            // 首先确保多工作区已正确初始化
            if (!mindmaps.workspace || !mindmaps.knowledge || !mindmaps.project) {
                console.log('重新初始化多工作区...');
                initMindmaps();
            }
            
            // 导出功能已通过exportToCustomFile函数实现
            
            // 尝试加载保存的数据
            var hasRecoveredData = loadSavedData();
            
            // 如果没有恢复数据，进行正常初始化
            if (!hasRecoveredData) {
                // 执行工具初始化并初始化当前活跃工作区的节点数据库
                initializeNodeMindTool();
                initNodeDatabase();
                
                // 显示选中节点
                updateSelectedNodeDisplay();
                
                // 如果有选中节点，显示详细信息
                var selected = getCurrentJsMind().get_selected_node();
                if (selected) {
                    showNodeDetails(selected.id);
                }
            }
            
            // 设置自动保存
            setupAutoSave();
            
            // 获取URL传入的项目信息
            getProjectInfoFromURL();
            
            // 初始化提示词模板管理器
            setTimeout(() => {
                initializeTemplateManager();
            }, 1000);
            
            // 添加全局键盘事件监听
            document.addEventListener('keydown', function(e) {
                // ESC键关闭模板管理器
                if (e.key === 'Escape') {
                    const templateModal = document.getElementById('template-manager-container');
                    if (templateModal && templateModal.style.display !== 'none') {
                        closeTemplateManager();
                        e.preventDefault();
                    }
                }
            });
            
            showMessage('🎉 jsMind 本地拖拽演示已启动！');
            console.log('jsMind 本地拖拽版本演示已启动');
            console.log('版本: 0.8.7 (本地版本)');
            console.log('拖拽功能: 已启用');
            console.log('当前主题:', themes[currentThemeIndex].label);
        });

        // 状态标签相关函数（已简化）
        
        // 修改原有的removeTag函数以支持新的标签类型
        function removeTag(nodeId, tagType, tagValue) {
            if (!nodeDatabase[nodeId] || !nodeDatabase[nodeId].tags[tagType]) return;
            
            var index = nodeDatabase[nodeId].tags[tagType].indexOf(tagValue);
            if (index > -1) {
                nodeDatabase[nodeId].tags[tagType].splice(index, 1);
                
                // 更新修改时间
                nodeDatabase[nodeId].time.modified = new Date().toLocaleString();
                
                // 根据标签类型刷新对应区域
                if (tagType === 'custom') {
                    refreshTagGroups(nodeId);
                } else if (tagType === 'future') {
                    refreshFutureTags(nodeId);
                } else {
                    // 原有的标签类型处理
                    var tagContainer = document.getElementById(tagType + '_' + nodeId);
                    if (tagContainer) {
                        tagContainer.innerHTML = nodeDatabase[nodeId].tags[tagType].map(tag => 
                            `<span class="tag-item">${tag} <button type="button" onclick="removeTag('${nodeId}', '${tagType}', '${tag}')" class="tag-remove">×</button></span>`
                        ).join('');
                    }
                }
                
                // 自动保存
                autoSaveData();
                
                console.log('🏷️ 移除标签:', tagType, tagValue);
            }
        }

        // 设置节点状态
        function setNodeStatus(nodeId, status) {
            if (!nodeDatabase[nodeId]) return;
            
            // 更新节点状态
            nodeDatabase[nodeId].status = status;
            
            // 更新修改时间
            nodeDatabase[nodeId].time.modified = new Date().toLocaleString();
            
            // 重新渲染详情面板以更新状态显示
            if (document.getElementById('detail-info-content')) {
                renderDetailInfo(nodeId);
            }
            
            // 自动保存
            autoSaveData();
            
            showMessage(`✅ 节点状态已设置为: ${status}`);
            console.log('🏷️ 设置节点状态:', nodeId, status);
        }

        // 添加键盘快捷键和帮助
        document.addEventListener('keydown', function(e) {
            // 导出功能快捷键已移除，将在后续开发中实现
            
            if (e.ctrlKey && e.key === 'o') {
                e.preventDefault();
                triggerImport();
                return;
            }
            
            // 帮助快捷键
            if (e.ctrlKey && e.key === 'h') {
                e.preventDefault();
                alert('jsMind 拖拽演示 - 快捷键帮助:\n\n基本操作:\n• Ctrl+Enter - 添加子节点\n• Enter - 添加兄弟节点\n• F2 - 编辑节点内容\n• Delete - 删除节点\n• Space - 展开/收起节点\n• 方向键 - 选择相邻节点\n\n文件操作:\n• Ctrl+O - 导入文件（支持JSON/JM/MM格式）\n\n拖拽操作:\n• 鼠标左键拖拽节点移动\n• 拖拽到目标节点上释放\n• 支持跨分支拖拽\n• 实时视觉反馈\n\nCtrl+H - 显示此帮助');
            }
        });

        // ===== 标签功能（无颜色） =====
        
        // 切换状态标签（支持多选）
        function toggleStatusTag(nodeId, tag) {
            if (!nodeDatabase[nodeId]) return;
            
            // 确保statusTags数组存在
            if (!nodeDatabase[nodeId].statusTags) {
                nodeDatabase[nodeId].statusTags = [];
            }
            
            var statusTags = nodeDatabase[nodeId].statusTags;
            var index = statusTags.indexOf(tag);
            
            if (index > -1) {
                // 移除标签
                statusTags.splice(index, 1);
                showMessage(`🏷️ 移除标签: ${tag}`);
            } else {
                // 添加标签
                statusTags.push(tag);
                showMessage(`🏷️ 添加标签: ${tag}`);
            }
            
            // 更新修改时间
            nodeDatabase[nodeId].time.modified = new Date().toLocaleString();
            
            // 实时更新详情面板中的状态标签显示
            updateCurrentNodeStatusTagsDisplay(nodeId);
            
            // 更新标签管理选项卡中的当前节点状态标签显示
            updateCurrentNodeStatusTags(nodeId);
            
            // 更新扩展区域中的当前节点状态标签显示
            updateCurrentNodeStatusTagsExtension(nodeId);
            
            // 自动保存
            autoSaveData();
            
            // 如果有已知文件路径，也保存到文件
            if (lastSavedFilePath && lastSavedFilePath.handle) {
                setTimeout(autoSaveToFile, 100);
            }
            
            console.log('🏷️ 节点标签更新:', nodeId, statusTags);
        }
        
        // 更新标签管理选项卡中的当前节点状态标签显示
        function updateCurrentNodeStatusTags(nodeId) {
            var container = document.getElementById('current-node-status-tags');
            if (!container || !nodeDatabase[nodeId]) return;
            
            var statusTags = nodeDatabase[nodeId].statusTags || [];
            
            if (statusTags.length === 0) {
                container.innerHTML = '<div class="empty-state-small">暂无状态标签</div>';
                return;
            }
            
            var tagsHtml = statusTags.map(function(tag) {
                return `<div class="status-tag-item active" onclick="toggleStatusTag('${nodeId}', '${tag}')">${tag}</div>`;
            }).join('');
            
            container.innerHTML = tagsHtml;
        }
        
        // 更新扩展区域中的当前节点状态标签显示
        function updateCurrentNodeStatusTagsExtension(nodeId) {
            var container = document.getElementById('current-node-status-tags-extension');
            if (!container || !nodeDatabase[nodeId]) return;
            
            var statusTags = nodeDatabase[nodeId].statusTags || [];
            
            if (statusTags.length === 0) {
                container.innerHTML = '<div class="empty-state-small">暂无状态标签</div>';
                return;
            }
            
            var tagsHtml = statusTags.map(function(tag) {
                return `<div class="status-tag-item active" onclick="toggleStatusTag('${nodeId}', '${tag}')">${tag}</div>`;
            }).join('');
            
            container.innerHTML = tagsHtml;
        }

        // 注意：setNodeStatus函数已在上方定义，此处不再重复声明

        // ===== 项目参数管理功能 =====
        
        // 全局变量存储项目信息
        var projectInfo = {
            name: '',
            path: ''
        };
        
        // 从URL参数获取项目信息
        function getProjectInfoFromURL() {
            var urlParams = new URLSearchParams(window.location.search);
            var projectName = urlParams.get('projectName') || urlParams.get('project_name') || urlParams.get('name');
            var projectPath = urlParams.get('projectPath') || urlParams.get('project_path') || urlParams.get('path');
            
            console.log('🔍 检查URL参数:', {
                'projectName': urlParams.get('projectName'),
                'project_name': urlParams.get('project_name'),
                'name': urlParams.get('name'),
                'projectPath': urlParams.get('projectPath'),
                'project_path': urlParams.get('project_path'),
                'path': urlParams.get('path'),
                'fullURL': window.location.href
            });
            
            if (projectName) {
                projectInfo.name = decodeURIComponent(projectName);
            }
            if (projectPath) {
                projectInfo.path = decodeURIComponent(projectPath);
                
                // 如果没有项目名称但有路径，从路径中提取项目名称（约定：项目名称=文件夹名称）
                if (!projectInfo.name && projectPath) {
                    var pathParts = projectInfo.path.replace(/\\/g, '/').split('/');
                    var folderName = pathParts[pathParts.length - 1] || pathParts[pathParts.length - 2];
                    if (folderName) {
                        projectInfo.name = folderName;
                        console.log('📋 从路径提取项目名称:', folderName);
                    }
                }
            }
            
            // 如果没有从URL获取到参数，设置默认值用于演示
            if (!projectInfo.name && !projectInfo.path) {
                projectInfo.name = 'nodemind';
                projectInfo.path = '/d:/AI-Projects/nodemind';
                console.log('📋 使用默认项目信息进行演示');
            }
            
            // 更新显示
            updateProjectInfoDisplay();
            
            console.log('📋 项目信息已获取:', projectInfo);
        }
        
        // 更新项目信息显示
        function updateProjectInfoDisplay() {
            // 使用querySelectorAll更新所有相同ID的元素（修复重复ID问题）
            var nameElements = document.querySelectorAll('#project-name-display');
            var pathElements = document.querySelectorAll('#project-path-display');
            
            console.log('🔄 更新项目信息显示:', {
                'projectInfo': projectInfo,
                'nameElements': nameElements.length,
                'pathElements': pathElements.length
            });
            
            // 更新所有项目名称显示元素
            nameElements.forEach(function(element) {
                element.textContent = projectInfo.name || '未设置';
                element.title = projectInfo.name || '未设置';
            });
            
            // 更新所有项目路径显示元素
            pathElements.forEach(function(element) {
                element.textContent = projectInfo.path || '未设置';
                element.title = projectInfo.path || '未设置';
            });
            
            if (nameElements.length > 0 || pathElements.length > 0) {
                console.log('✅ 项目信息显示已更新:', {
                    'name': projectInfo.name,
                    'path': projectInfo.path,
                    'updatedElements': nameElements.length + pathElements.length
                });
            } else {
                console.warn('⚠️ 未找到项目信息显示元素');
            }
        }
        
        // 输入校准功能（预留接口）
        function performInputCalibration() {
            showMessage('🎯 输入校准功能开发中...');
            console.log('🎯 输入校准功能被调用');
            console.log('当前项目信息:', projectInfo);
            
            // TODO: 在这里实现具体的输入校准逻辑
            // 可能包括：
            // - 验证项目路径是否有效
            // - 校准输入参数格式
            // - 同步项目配置
            // - 重新加载项目数据等
        }
        
        // ===== 提示词模板管理功能 =====
        
        // 全局模板管理器实例
        var templateManager = null;
        
        // 初始化提示词模板管理器
        async function initializeTemplateManager() {
            try {
                // 检查浏览器兼容性
                if (!checkBrowserCompatibility()) {
                    console.error('❌ 浏览器不兼容，无法初始化模板管理器');
                    return;
                }
                
                // 查找模板管理器容器（使用modal-body作为容器）
                const container = document.querySelector('#template-manager-container .modal-body');
                if (!container) {
                    console.warn('⚠️ 未找到模板管理器容器');
                    return;
                }
                
                // 创建模板管理器实例
                templateManager = createTemplateManager(container);
                
                // 监听模板管理器事件
                templateManager.addEventListener('templateManagerReady', (event) => {
                    console.log('🎉 模板管理器就绪:', event.detail);
                    showMessage('📝 提示词模板管理器已启动');
                });
                
                templateManager.addEventListener('templateManagerError', (event) => {
                    console.error('❌ 模板管理器错误:', event.detail);
                    showMessage('❌ 模板管理器启动失败', 'error');
                });
                
                // 等待初始化完成
                await new Promise((resolve, reject) => {
                    const timeout = setTimeout(() => {
                        reject(new Error('初始化超时'));
                    }, 5000);
                    
                    templateManager.addEventListener('templateManagerReady', () => {
                        clearTimeout(timeout);
                        resolve();
                    });
                    
                    templateManager.addEventListener('templateManagerError', (event) => {
                        clearTimeout(timeout);
                        reject(new Error(event.detail.error));
                    });
                });
                
                console.log('🚀 模板管理器初始化完成');
                
            } catch (error) {
                console.error('❌ 初始化模板管理器失败:', error);
                showMessage('❌ 模板管理器初始化失败', 'error');
            }
        }
        
        // 打开模板管理器
        async function openTemplateManager() {
            console.log('🔧 打开模板管理器...');
            
            // 显示模板管理器容器
            const container = document.getElementById('template-manager-container');
            if (container) {
                console.log('✅ 找到模板管理器容器，显示模态框');
                container.style.display = 'block';
                
                // 检查模态框头部是否存在
                const header = container.querySelector('.modal-header');
                const backBtn = container.querySelector('.back-btn');
                console.log('📋 模态框头部:', header ? '存在' : '不存在');
                console.log('🔙 返回按钮:', backBtn ? '存在' : '不存在');
            } else {
                console.error('❌ 未找到模板管理器容器');
                return;
            }
            
            if (!templateManager) {
                console.log('🔧 初始化模板管理器...');
                await initializeTemplateManager();
                return;
            }
            
            // 重新加载数据
            templateManager.reload();
        }
        
        // 关闭模板管理器
        function closeTemplateManager() {
            const container = document.getElementById('template-manager-container');
            if (container) {
                container.style.display = 'none';
            }
        }
        
        // 测试模态框显示（调试用）
        function testModal() {
            console.log('🧪 测试模态框显示...');
            const container = document.getElementById('template-manager-container');
            if (container) {
                container.style.display = 'block';
                console.log('✅ 模态框已显示');
                
                // 检查各个元素
                const header = container.querySelector('.modal-header');
                const headerLeft = container.querySelector('.modal-header-left');
                const backBtn = container.querySelector('.back-btn');
                const title = container.querySelector('.modal-header h3');
                const closeBtn = container.querySelector('.close-btn');
                
                console.log('📋 模态框头部:', header ? '✅ 存在' : '❌ 不存在');
                console.log('📋 头部左侧:', headerLeft ? '✅ 存在' : '❌ 不存在');
                console.log('🔙 返回按钮:', backBtn ? '✅ 存在' : '❌ 不存在');
                console.log('📝 标题:', title ? '✅ 存在' : '❌ 不存在');
                console.log('❌ 关闭按钮:', closeBtn ? '✅ 存在' : '❌ 不存在');
                
                if (backBtn) {
                    const styles = window.getComputedStyle(backBtn);
                    console.log('🔙 返回按钮样式:');
                    console.log('  - display:', styles.display);
                    console.log('  - visibility:', styles.visibility);
                    console.log('  - opacity:', styles.opacity);
                    console.log('  - z-index:', styles.zIndex);
                    console.log('  - position:', styles.position);
                }
            } else {
                console.error('❌ 未找到模态框容器');
            }
        }
        
        // 快速使用模板
        function quickUseTemplate(templateId, variables = {}) {
            if (!templateManager) {
                showMessage('❌ 模板管理器未初始化', 'error');
                return;
            }
            
            try {
                const processedTemplate = templateManager.processTemplate(templateId, variables);
                if (processedTemplate) {
                    // 复制到剪贴板
                    templateManager.copyTemplateToClipboard(templateId, variables);
                    showMessage('📋 模板内容已复制到剪贴板');
                    
                    return processedTemplate.processedContent;
                }
            } catch (error) {
                console.error('❌ 使用模板失败:', error);
                showMessage('❌ 使用模板失败', 'error');
            }
            
            return null;
        }
        
        // 获取模板列表（供其他功能使用）
        function getAvailableTemplates() {
            if (!templateManager) {
                return [];
            }
            
            return templateManager.getAllTemplates();
        }
        
        // 搜索模板
        function searchTemplates(query) {
            if (!templateManager) {
                return [];
            }
            
            return templateManager.searchTemplates(query);
        }
        
        // 处理模板搜索
        function handleTemplateSearch(query) {
            if (!query.trim()) {
                // 如果搜索为空，显示默认的快速模板
                updateQuickTemplates();
                return;
            }
            
            const results = searchTemplates(query);
            updateQuickTemplatesWithResults(results);
        }
        
        // 更新快速模板显示
        function updateQuickTemplates() {
            const container = document.getElementById('quick-templates');
            if (!container) return;
            
            container.innerHTML = `
                <div class="template-item" onclick="quickUseTemplate('code_review')">
                    <span class="template-icon">🔍</span>
                    <span class="template-name">代码审查</span>
                </div>
                <div class="template-item" onclick="quickUseTemplate('bug_analysis')">
                    <span class="template-icon">🐛</span>
                    <span class="template-name">Bug分析</span>
                </div>
                <div class="template-item" onclick="quickUseTemplate('feature_design')">
                    <span class="template-icon">🎨</span>
                    <span class="template-name">功能设计</span>
                </div>
                <div class="template-item" onclick="quickUseTemplate('documentation')">
                    <span class="template-icon">📚</span>
                    <span class="template-name">文档编写</span>
                </div>
            `;
        }
        
        // 使用搜索结果更新快速模板
        function updateQuickTemplatesWithResults(results) {
            const container = document.getElementById('quick-templates');
            if (!container) return;
            
            if (results.length === 0) {
                container.innerHTML = `
                    <div style="grid-column: 1 / -1; text-align: center; padding: 20px; color: #6c757d;">
                        <div style="font-size: 24px; margin-bottom: 10px;">🔍</div>
                        <div>未找到匹配的模板</div>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = results.slice(0, 4).map(template => `
                <div class="template-item" onclick="quickUseTemplate('${template.id}')">
                    <span class="template-icon">${getTemplateIcon(template.category)}</span>
                    <span class="template-name">${template.name}</span>
                </div>
            `).join('');
        }
        
        // 根据分类获取模板图标
        function getTemplateIcon(category) {
            const icons = {
                'development': '💻',
                'design': '🎨',
                'analysis': '📊',
                'documentation': '📚',
                'testing': '🧪',
                'planning': '📋',
                'communication': '💬'
            };
            return icons[category] || '📝';
        }

        // ===== 扩展区域折叠功能 =====
        
        // 切换扩展区域折叠状态
        function toggleExtensionPanel() {
            var detailsPanel = document.querySelector('.details-panel');
            var extensionPanel = document.querySelector('.details-panel-right');
            var toggleBtn = document.getElementById('extensionToggleBtn');
            
            if (detailsPanel.classList.contains('extension-collapsed')) {
                // 展开扩展区域
                detailsPanel.classList.remove('extension-collapsed');
                extensionPanel.classList.remove('collapsed');
                toggleBtn.innerHTML = '◀ 折叠扩展区';
                showMessage('📖 扩展区域已展开');
            } else {
                // 折叠扩展区域
                detailsPanel.classList.add('extension-collapsed');
                extensionPanel.classList.add('collapsed');
                toggleBtn.innerHTML = '▶ 展开扩展区';
                showMessage('📕 扩展区域已折叠');
            }
            
            // 延迟调整脑图大小以适应新的布局
            setTimeout(function() {
                updateLayoutHeight();
                var currentMindmap = getCurrentJsMind();
                if (currentMindmap) {
                    currentMindmap.resize();
                }
            }, 350);
        }

        // ===== URL参数处理功能 =====
        
        // 解析URL参数并更新项目信息
        function parseURLParamsAndUpdateProject() {
            try {
                // 获取URL参数
                const urlParams = new URLSearchParams(window.location.search);
                
                console.log('🔗 解析URL参数...');
                console.log('完整URL:', window.location.href);
                
                // 获取项目信息参数
                const projectId = urlParams.get('id');
                const projectTitle = urlParams.get('title');
                const projectName = urlParams.get('name');
                const projectPath = urlParams.get('path');
                const defaultPanel = urlParams.get('panel');
                const mindmapTab = urlParams.get('mindmap_tab');
                
                console.log('URL参数解析结果:');
                console.log('- 项目ID:', projectId);
                console.log('- 项目标题:', projectTitle);
                console.log('- 项目名称:', projectName);
                console.log('- 项目路径:', projectPath);
                console.log('- 默认面板:', defaultPanel);
                console.log('- 脑图选项卡:', mindmapTab);
                
                // 更新projectInfo对象（关键修复）
                if (projectName || projectTitle) {
                    projectInfo.name = projectName || projectTitle;
                    console.log('✅ projectInfo.name 已更新:', projectInfo.name);
                }
                if (projectPath) {
                    projectInfo.path = decodeURIComponent(projectPath);
                    console.log('✅ projectInfo.path 已更新:', projectInfo.path);
                    
                    // 如果没有项目名称但有路径，从路径中提取项目名称
                    if (!projectInfo.name && projectPath) {
                        var pathParts = projectInfo.path.replace(/\\/g, '/').split('/');
                        var folderName = pathParts[pathParts.length - 1] || pathParts[pathParts.length - 2];
                        if (folderName) {
                            projectInfo.name = folderName;
                            console.log('📋 从路径提取项目名称:', folderName);
                        }
                    }
                }
                
                // 如果没有从URL获取到参数，设置默认值
                if (!projectInfo.name && !projectInfo.path) {
                    projectInfo.name = 'nodemind';
                    projectInfo.path = 'D:/AI-Projects/nodemind';
                    console.log('📋 使用默认项目信息');
                }
                
                console.log('📋 最终projectInfo对象:', projectInfo);
                
                // 更新项目名称显示（更新所有具有该ID的元素）
                const projectNameDisplays = document.querySelectorAll('#project-name-display');
                const displayName = projectInfo.name || '未设置';
                if (projectNameDisplays.length > 0) {
                    projectNameDisplays.forEach(element => {
                        element.textContent = displayName;
                    });
                    console.log('✅ 项目名称显示已更新:', displayName, `(更新了${projectNameDisplays.length}个元素)`);
                } else {
                    console.warn('⚠️ 未找到项目名称显示元素');
                }
                
                // 更新项目路径显示（更新所有具有该ID的元素）
                const projectPathDisplays = document.querySelectorAll('#project-path-display');
                const displayPath = projectInfo.path || '未设置';
                if (projectPathDisplays.length > 0) {
                    projectPathDisplays.forEach(element => {
                        element.textContent = displayPath;
                    });
                    console.log('✅ 项目路径显示已更新:', displayPath, `(更新了${projectPathDisplays.length}个元素)`);
                } else {
                    console.warn('⚠️ 未找到项目路径显示元素');
                }
                
                // 根据参数设置默认打开的面板
                if (defaultPanel) {
                    setTimeout(() => {
                        switchTab(defaultPanel);
                        console.log('✅ 已切换到默认面板:', defaultPanel);
                    }, 100);
                }
                
                // 根据参数激活脑图选项卡
                if (mindmapTab) {
                    setTimeout(() => {
                        switchMindmapTab(mindmapTab);
                        console.log('✅ 已激活脑图选项卡:', mindmapTab);
                    }, 200);
                }
                
                // 显示成功通知
                if (projectName || projectTitle || projectPath) {
                    setTimeout(() => {
                        showMessage(`📋 项目信息已加载: ${projectName || projectTitle || '未命名项目'}`);
                    }, 500);
                }
                
            } catch (error) {
                console.error('❌ URL参数解析失败:', error);
                showMessage('❌ 项目信息加载失败', 'error');
            }
        }
        
        // 标签点击事件处理
        document.addEventListener('DOMContentLoaded', function() {
            // 页面加载完成后解析URL参数
            console.log('🚀 页面加载完成，开始解析URL参数...');
            parseURLParamsAndUpdateProject();
            
            // 初始化基本信息选项卡内容
            setTimeout(function() {
                renderBasicInfo('init'); // 传入特殊参数表示初始化
                console.log('🔄 页面加载时初始化基本信息选项卡');
            }, 100);
            
            // 设置定期更新项目信息显示（防止被其他函数覆盖）
            setInterval(function() {
                // 只有当projectInfo有有效数据时才更新
                if (projectInfo.name && projectInfo.name !== '未设置') {
                    updateProjectInfoDisplay();
                }
            }, 1000); // 每秒检查一次
            
            const tagItems = document.querySelectorAll('.tag-item');
            tagItems.forEach(tag => {
                tag.addEventListener('click', function() {
                    const tagText = this.textContent.trim();
                    const tagType = this.classList.contains('tag-yellow') ? 'normal' :
                                  this.classList.contains('tag-green') ? 'ai' :
                                  this.classList.contains('tag-blue') ? 'note' : 'other';
                    
                    // 切换标签选中状态
                    this.classList.toggle('selected');
                    
                    // 这里可以添加标签筛选逻辑
                    console.log(`标签点击：${tagText}，类型：${tagType}`);
                });
            });
        });
            </script>