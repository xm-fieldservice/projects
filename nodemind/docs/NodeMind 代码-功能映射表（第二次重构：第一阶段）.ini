## 🎯 **是的，我们应该先生成详细的"代码-功能映射表"**

这是最关键的第一步，因为：
1. **避免功能丢失** - 确保迁移过程中不遗漏任何功能
2. **明确迁移目标** - 每个函数都有明确的归属模块
3. **进度可控** - 可以逐项完成，随时检查进度

让我开始分析当前的 `index.html` 文件，生成详细的代码-功能映射表：
Read file: index.html
Ran tool
Ran tool
```bash
findstr /n "^.*function.*(" index.html | findstr /v "addEventListener" | measure-object
```
```bash
Get-Content index.html | Select-String "^\s*function\s+\w+\s*\(" | Measure-Object
```
## 📋 **NodeMind 代码-功能映射表 (第一阶段)**

基于分析，`index.html` 中共有 **72个函数** 需要迁移。我将按功能模块生成详细的映射表：

### 🎯 **核心思维导图功能** → `src/services/mindmap_service.js`

| 现有函数 | 行号 | 目标位置 | 功能描述 |
|---------|------|---------|----------|
| `initMindmaps()` | 1989 | `MindmapService.initialize()` | 初始化三个思维导图实例 |
| `getCurrentJsMind()` | 5061 | `MindmapService.getCurrentMindmap()` | 获取当前活动的思维导图实例 |
| `switchMindmapTab()` | 5066 | `MindmapService.switchTab()` | 切换思维导图选项卡 |
| `syncMindmapDataWithNodeDatabase()` | 2027 | `MindmapService.syncData()` | 同步思维导图数据与节点数据库 |
| `traverseAndSyncNode()` | 2049 | `MindmapService.traverseNodes()` | 遍历并同步节点数据 |
| `traverseAndInitNodes()` | 5551 | `MindmapService.initNodes()` | 遍历并初始化节点 |

### 🎮 **UI控制与事件** → `src/controllers/ui_controller.js`

| 现有函数 | 行号 | 目标位置 | 功能描述 |
|---------|------|---------|----------|
| `initModularEvents()` | 1562 | `UIController.bindEvents()` | 初始化模块化事件监听器 |
| `bindNodeEvents()` | 2106 | `UIController.bindNodeEvents()` | 绑定节点相关事件 |
| `handleNodeSelect()` | 2160 | `UIController.handleNodeSelect()` | 处理节点选择事件 |
| `handleNodeEdit()` | 2182 | `UIController.handleNodeEdit()` | 处理节点编辑事件 |
| `switchDetailTab()` | 2493 | `UIController.switchDetailTab()` | 切换详情面板选项卡 |
| `switchToDetailTab()` | 2488 | `UIController.switchToDetailTab()` | 切换到详情选项卡 |
| `showUserGuide()` | 5643 | `UIController.showUserGuide()` | 显示使用指南 |
| `showMessage()` | 5191 | `UIController.showMessage()` | 显示消息提示 |

### 📝 **节点详情管理** → `src/services/node_service.js`

| 现有函数 | 行号 | 目标位置 | 功能描述 |
|---------|------|---------|----------|
| `showNodeDetails()` | 2216 | `NodeService.showDetails()` | 显示节点详情 |
| `updateNodeTitle()` | 2540 | `NodeService.updateTitle()` | 更新节点标题 |
| `updateNodeContent()` | 2563 | `NodeService.updateContent()` | 更新节点内容 |
| `updateNodeAuthor()` | 2667 | `NodeService.updateAuthor()` | 更新节点作者 |
| `updateNodeContentIcon()` | 2675 | `NodeService.updateContentIcon()` | 更新节点内容图标 |
| `saveNodeDetails()` | 2692 | `NodeService.saveDetails()` | 保存节点详情 |
| `submitContent()` | 2698 | `NodeService.submitContent()` | 提交节点内容 |
| `clearNodeFormFromTab()` | 2526 | `NodeService.clearForm()` | 清空节点表单 |
| `bindDetailInputEvents()` | 5613 | `NodeService.bindInputEvents()` | 绑定详情输入事件 |

### 💾 **存储与文件操作** → `src/services/storage_service.js`

| 现有函数 | 行号 | 目标位置 | 功能描述 |
|---------|------|---------|----------|
| `autoSaveData()` | 5111 | `StorageService.autoSave()` | 自动保存数据到本地存储 |
| `loadSavedData()` | 5138 | `StorageService.loadData()` | 从本地存储加载数据 |
| `setupAutoSave()` | 5224 | `StorageService.setupAutoSave()` | 设置自动保存 |
| `saveProjectMindmap()` | 5718 | `StorageService.saveProject()` | 保存项目思维导图 |
| `saveWithFileSystemAPI()` | 5768 | `StorageService.saveWithFileAPI()` | 使用文件系统API保存 |
| `saveWithDownload()` | 5800 | `StorageService.saveWithDownload()` | 使用下载方式保存 |
| `triggerImportFile()` | 5471 | `StorageService.triggerImport()` | 触发文件导入 |
| `handleFileImport()` | 5480 | `StorageService.handleImport()` | 处理文件导入 |

### 🏷️ **标签管理** → `src/services/tag_service.js`

| 现有函数 | 行号 | 目标位置 | 功能描述 |
|---------|------|---------|----------|
| `initializeTagManagement()` | 5242 | `TagService.initialize()` | 初始化标签管理 |
| `toggleTag()` | 5297 | `TagService.toggleTag()` | 切换标签状态 |
| `addTagToNode()` | 5328 | `TagService.addTag()` | 添加标签到节点 |
| `removeTagFromNode()` | 5352 | `TagService.removeTag()` | 从节点移除标签 |
| `restoreTagStates()` | 5376 | `TagService.restoreStates()` | 恢复标签状态 |
| `generateDefaultTagHTML()` | 5830 | `TagService.generateHTML()` | 生成默认标签HTML |
| `testTagSync()` | 5411 | `TagService.testSync()` | 测试标签同步 |

### 📋 **项目信息管理** → `src/services/project_service.js`

| 现有函数 | 行号 | 目标位置 | 功能描述 |
|---------|------|---------|----------|
| `initProjectInfo()` | 4056 | `ProjectService.init()` | 初始化项目信息 |
| `updateProjectInfoNodeAuthor()` | 3442 | `ProjectService.updateAuthor()` | 更新项目信息节点作者 |
| `updateCurrentNodeAuthor()` | 3450 | `ProjectService.updateCurrentAuthor()` | 更新当前节点作者 |
| `getProjectName()` | 3913 | `ProjectService.getName()` | 获取项目名称 |

### 🛠️ **会话管理功能** → `src/services/session_service.js`

| 现有函数 | 行号 | 目标位置 | 功能描述 |
|---------|------|---------|----------|
| `initializeNodeSessions()` | 2880 | `SessionService.initialize()` | 初始化节点会话 |
| `generateFullMarkdownContent()` | 2890 | `SessionService.generateMarkdown()` | 生成完整Markdown内容 |
| `updateNodeFullContent()` | 2914 | `SessionService.updateFullContent()` | 更新节点完整内容 |
| `addNewSession()` | 2935 | `SessionService.addSession()` | 添加新会话 |
| `renderSessionList()` | 3021 | `SessionService.renderList()` | 渲染会话列表 |
| `selectSession()` | 3059 | `SessionService.selectSession()` | 选择会话 |
| `clearAllSessions()` | 3096 | `SessionService.clearAll()` | 清空所有会话 |
| `viewAllSessions()` | 3129 | `SessionService.viewAll()` | 查看所有会话 |
| `saveSessionData()` | 3167 | `SessionService.save()` | 保存会话数据 |
| `loadSessionData()` | 3176 | `SessionService.load()` | 加载会话数据 |
| `parseContentToSessions()` | 2598 | `SessionService.parseContent()` | 解析内容为会话 |
| `toggleQAMode()` | 2769 | `SessionService.toggleQAMode()` | 切换问答模式 |
| `copyContentFromEditor()` | 2820 | `SessionService.copyFromEditor()` | 从编辑器复制内容 |
| `pasteContentToEditor()` | 2848 | `SessionService.pasteToEditor()` | 粘贴内容到编辑器 |

### 💉 **命令注入功能** → `src/services/injection_service.js`

| 现有函数 | 行号 | 目标位置 | 功能描述 |
|---------|------|---------|----------|
| `performCalibration()` | 3528 | `InjectionService.calibrate()` | 执行校准 |
| `injectCommand()` | 3557 | `InjectionService.inject()` | 注入命令 |
| `checkTemplateAvailability()` | 3562 | `InjectionService.checkTemplate()` | 检查模板可用性 |
| `applyTemplate()` | 3574 | `InjectionService.applyTemplate()` | 应用模板 |
| `performCommandInjection()` | 3601 | `InjectionService.performInjection()` | 执行命令注入 |
| `executeMouseInjection()` | 3631 | `InjectionService.executeMouseInjection()` | 执行鼠标注入 |
| `simulatePaste()` | 3636 | `InjectionService.simulatePaste()` | 模拟粘贴 |
| `provideUserGuidance()` | 3685 | `InjectionService.provideGuidance()` | 提供用户指导 |
| `logInjectionResult()` | 3748 | `InjectionService.logResult()` | 记录注入结果 |
| `updateLogDisplay()` | 3791 | `InjectionService.updateLogDisplay()` | 更新日志显示 |
| `exportLogs()` | 3838 | `InjectionService.exportLogs()` | 导出日志 |
| `clearLogs()` | 3879 | `InjectionService.clearLogs()` | 清空日志 |
| `clearCommandInput()` | 3887 | `InjectionService.clearInput()` | 清空命令输入 |
| `updateInjectionStatus()` | 3895 | `InjectionService.updateStatus()` | 更新注入状态 |
| `exportInjectionLogs()` | 4010 | `InjectionService.exportInjectionLogs()` | 导出注入日志 |

### 📝 **模板管理器** → `src/services/template_service.js`

| 现有函数 | 行号 | 目标位置 | 功能描述 |
|---------|------|---------|----------|
| `openTemplateManager()` | 4073 | `TemplateService.open()` | 打开模板管理器 |
| `initializeTemplateManagerContent()` | 4096 | `TemplateService.initContent()` | 初始化模板管理器内容 |
| `bindTemplateManagerEvents()` | 4373 | `TemplateService.bindEvents()` | 绑定模板管理器事件 |
| `closeTemplateManager()` | 4408 | `TemplateService.close()` | 关闭模板管理器 |
| `addNewTemplate()` | 4660 | `TemplateService.addNew()` | 添加新模板 |
| `toggleTemplateSelection()` | 4673 | `TemplateService.toggleSelection()` | 切换模板选择 |
| `editTemplate()` | 4716 | `TemplateService.edit()` | 编辑模板 |
| `deleteTemplate()` | 4734 | `TemplateService.delete()` | 删除模板 |
| `closeTemplateEditModal()` | 4753 | `TemplateService.closeEditModal()` | 关闭模板编辑模态框 |
| `saveTemplate()` | 4759 | `TemplateService.save()` | 保存模板 |
| `importTemplates()` | 4794 | `TemplateService.import()` | 导入模板 |
| `exportTemplates()` | 4825 | `TemplateService.export()` | 导出模板 |
| `updateSelectedTemplatesList()` | 4846 | `TemplateService.updateSelectedList()` | 更新选中模板列表 |
| `syncTemplateManagerSelection()` | 4886 | `TemplateService.syncSelection()` | 同步模板管理器选择 |
| `useSelectedTemplate()` | 4902 | `TemplateService.useSelected()` | 使用选中模板 |
| `removeSelectedTemplate()` | 4949 | `TemplateService.removeSelected()` | 移除选中模板 |
| `toggleFilterTag()` | 4970 | `TemplateService.toggleFilter()` | 切换过滤标签 |
| `filterTemplates()` | 5034 | `TemplateService.filter()` | 过滤模板 |
| `getFilterDisplayNames()` | 5048 | `TemplateService.getFilterNames()` | 获取过滤显示名称 |
| `onTemplateSceneChanged()` | 3936 | `TemplateService.onSceneChanged()` | 模板场景改变处理 |
| `onTemplateVersionChanged()` | 3963 | `TemplateService.onVersionChanged()` | 模板版本改变处理 |
| `testTemplate()` | 3980 | `TemplateService.test()` | 测试模板 |

### 🛠️ **工具函数** → `src/utils/utils.js`

| 现有函数 | 行号 | 目标位置 | 功能描述 |
|---------|------|---------|----------|
| `formatDateTime()` | 3194 | `Utils.formatDateTime()` | 格式化日期时间 |
| `copyToClipboard()` | 3719 | `Utils.copyToClipboard()` | 复制到剪贴板 |
| `sleep()` | 3744 | `Utils.sleep()` | 延时函数 |
| `clearOtherTabContents()` | 2414 | `Utils.clearTabContents()` | 清空其他选项卡内容 |
| `testDetailPanel()` | 5401 | `Utils.testDetailPanel()` | 测试详情面板 |

### 🎨 **UI分割器功能** → `src/ui/components/splitter.js`

| 现有函数 | 行号 | 目标位置 | 功能描述 |
|---------|------|---------|----------|
| `initializeDetailSplitter()` | 3201 | `Splitter.initDetail()` | 初始化详情分割器 |
| `initializeSidePanelSplitter()` | 3326 | `Splitter.initSidePanel()` | 初始化侧面板分割器 |

---

## 📊 **统计总结**

- **总函数数量**: 72个
- **核心思维导图**: 6个函数
- **UI控制**: 8个函数  
- **节点管理**: 9个函数
- **存储操作**: 8个函数
- **标签管理**: 7个函数
- **项目信息**: 4个函数
- **会话管理**: 15个函数
- **命令注入**: 15个函数
- **模板管理**: 22个函数
- **工具函数**: 5个函数
- **UI组件**: 2个函数

## 🚀 **下一步行动**

现在我们有了完整的映射表，可以开始：

1. **验证现有模块** - 检查 `src/` 下的模块是否能承接这些功能
2. **开始迁移** - 按模块优先级逐个迁移函数
3. **功能测试** - 每迁移一个模块就测试对应功能

您希望我们从哪个模块开始迁移？我建议从 **核心思维导图功能** 开始，因为这是整个应用的基础。